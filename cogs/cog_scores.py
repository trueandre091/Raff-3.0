from os import getcwd
import disnake
from disnake.ext import commands

from cogs import counter_functions
from cogs.cog_special import convert_ex_to_lvl, top_create_embed
from cogs.cog_guilds_functions import DB, guild_sets_check, is_none
from bot import set, add, remove

FOLDER = getcwd()


class ScoresOperations(commands.Cog):
    """Where will be scores operations: /add_one, /remove_one, /add_any, /remove_any"""

    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @add.sub_command(
        description="–ü—Ä–∏–±–∞–≤–∏—Ç—å –æ—á–∫–∏ –ª—é–±–æ–º—É –∫–æ–ª-–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—É–ø–æ–º—è–Ω—É—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)",
    )
    async def scores(
        self,
        interaction: disnake.ApplicationCommandInteraction,
        —É—á–∞—Å—Ç–Ω–∏–∫–∏: str,
        –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: int,
    ):
        """Adding to several members a certain amount of scores"""
        settings = await guild_sets_check(interaction.guild.id, "GENERAL", "SCORES")
        if await is_none(interaction, settings):
            return

        guild = interaction.guild
        members_list = —É—á–∞—Å—Ç–Ω–∏–∫–∏.split()
        members_list_values = []

        await counter_functions.count_added_scores(
            –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ * len(members_list), interaction.guild.id
        )

        for member in members_list:
            member_id = int(member.strip("<@>"))
            member = guild.get_member(member_id)
            user = await DB.add_user(
                ds_id=member_id, username=member.name, scores=–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            )
            if user:
                await DB.update_user(
                    ds_id=user.ds_id,
                    username=user.username,
                    scores=user.scores + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ,
                )
                members_list_values.append(user.scores + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
            else:
                members_list_values.append(–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)

        members_dict = dict(zip(members_list, members_list_values))
        embed = disnake.Embed(
            title=f"{–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ} –æ—á. –±—ã–ª–æ –ø—Ä–∏–±–∞–≤–ª–µ–Ω–æ –∫ —É–∫–∞–∑–∞–Ω–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º",
            description="–ù–∞—Å—Ç–æ—è—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ —É –∫–∞–∂–¥–æ–≥–æ:",
            color=0x2B2D31,
        )
        for member, value in members_dict.items():
            member_id = int(member.strip("<@>"))
            user = await DB.get_user({"ds_id": member_id})
            embed.add_field(
                name=interaction.guild.get_member(member_id),
                value=f"```{user.scores} –æ—á.```",
            )

        await interaction.response.send_message(embed=embed)

    @remove.sub_command(
        description="–í—ã—á–µ—Å—Ç—å –æ—á–∫–∏ —É –ª—é–±–æ–≥–æ –∫–æ–ª-–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—É–ø–æ–º—è–Ω—É—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)",
    )
    async def scores(
        self,
        interaction: disnake.ApplicationCommandInteraction,
        —É—á–∞—Å—Ç–Ω–∏–∫–∏: str,
        –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: int,
    ):
        """Removing from several members a certain amount of scores"""
        settings = await guild_sets_check(interaction.guild.id, "GENERAL", "SCORES")
        if await is_none(interaction, settings):
            return

        guild = interaction.guild
        members_list = —É—á–∞—Å—Ç–Ω–∏–∫–∏.split()
        members_list_values = []

        await counter_functions.count_removed_scores(
            –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ * len(members_list), interaction.guild.id
        )

        for member in members_list:
            member_id = int(member.strip("<@>"))
            member = guild.get_member(member_id)
            user = await DB.get_user(ds_id=member_id)
            if not user:
                await DB.update_user(ds_id=member.id, username=member.name, scores=0)
                members_list_values.append(0)
            else:
                if –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ >= user.scores:
                    await DB.update_user(
                        ds_id=user.ds_id, username=user.username, scores=0
                    )
                    members_list_values.append(0)
                else:
                    await DB.update_user(
                        ds_id=user.ds_id,
                        username=user.username,
                        scores=user.scores - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ,
                    )
                    members_list_values.append(user.scores - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)

        members_dict = dict(zip(members_list, members_list_values))
        embed = disnake.Embed(
            title=f"{–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ} –æ—á. –±—ã–ª–æ –≤—ã—á—Ç–µ–Ω–æ —É —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
            description="–ù–∞—Å—Ç–æ—è—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ —É –∫–∞–∂–¥–æ–≥–æ:",
            color=0x2B2D31,
        )
        for member, value in members_dict.items():
            member_id = int(member.strip("<@>"))
            embed.add_field(
                name=interaction.guild.get_member(member_id), value=f"```{value} –æ—á.```"
            )

        await interaction.response.send_message(embed=embed)

    @set.sub_command(
        description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—á–∫–∏ –ª—é–±–æ–º—É –∫–æ–ª-–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—É–ø–æ–º—è–Ω—É—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)",
    )
    async def scores(
        self,
        interaction: disnake.ApplicationCommandInteraction,
        —É—á–∞—Å—Ç–Ω–∏–∫: disnake.Member,
        –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: int,
    ):
        """Setting for a member a certain amount of scores"""
        settings = await guild_sets_check(interaction.guild.id, "GENERAL", "SCORES")
        if await is_none(interaction, settings):
            return

        user = await DB.add_user(
            ds_id=—É—á–∞—Å—Ç–Ω–∏–∫.id, username=—É—á–∞—Å—Ç–Ω–∏–∫.name, scores=–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        )
        if user:
            await DB.update_user(
                ds_id=—É—á–∞—Å—Ç–Ω–∏–∫.id, username=—É—á–∞—Å—Ç–Ω–∏–∫.name, scores=–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            )

        await interaction.response.send_message(f"–£ {—É—á–∞—Å—Ç–Ω–∏–∫} —Ç–µ–ø–µ—Ä—å {–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ}")


async def convert(user, embed_dict):
    if user is None:
        embed_dict["fields"][0]["value"] = f"```0 –æ—á.```"
        embed_dict["fields"][1]["value"] = f"```0 –ª–≤–ª.```"
    else:
        embed_dict["fields"][0]["value"] = f"```{user.scores} –æ—á.```"
        embed_dict["fields"][1]["value"] = f"```{await convert_ex_to_lvl(user)} –ª–≤–ª.```"


class SpecialScoresCommands(commands.Cog):
    """Special scores commands: /—Ä–µ–ø, /—Ç–æ–ø, /reset"""

    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @commands.slash_command(
        description="–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª-–≤–æ –æ—á–∫–æ–≤ –∏ —É—Ä–æ–≤–µ–Ω—å —É —Å–µ–±—è / —É—á–∞—Å—Ç–Ω–∏–∫–∞"
    )
    async def —Ä–µ–ø(
        self,
        interaction: disnake.ApplicationCommandInteraction,
        —É—á–∞—Å—Ç–Ω–∏–∫: disnake.Member = None,
    ):
        """Showing user's or a somebody's amount of scores"""
        settings = await guild_sets_check(interaction.guild.id, "GENERAL", "SCORES")
        if await is_none(interaction, settings):
            return

        embed_dict = {
            "fields": [
                {"inline": True, "name": "–û—á–∫–∏"},
                {"inline": True, "name": "–û–ø—ã—Ç"},
            ],
            "footer": {"text": interaction.guild.name},
            "thumbnail": {"url": ""},
            "color": 0x2B2D31,
        }
        try:
            embed_dict["footer"]["icon_url"] = interaction.guild.icon.url
        except AttributeError:
            embed_dict["footer"]["icon_url"] = "https://i.postimg.cc/CMsM38p8/1.png"

        if —É—á–∞—Å—Ç–Ω–∏–∫:
            embed_dict["title"] = —É—á–∞—Å—Ç–Ω–∏–∫.name
            try:
                embed_dict["thumbnail"]["url"] = —É—á–∞—Å—Ç–Ω–∏–∫.avatar.url
            except AttributeError:
                embed_dict["thumbnail"]["url"] = "https://i.postimg.cc/CMsM38p8/1.png"
            user = await DB.get_user(ds_id=—É—á–∞—Å—Ç–Ω–∏–∫.id)
            await convert(user, embed_dict)
        else:
            embed_dict["title"] = interaction.author.name
            try:
                embed_dict["thumbnail"]["url"] = interaction.author.avatar.url
            except AttributeError:
                embed_dict["thumbnail"]["url"] = "https://i.postimg.cc/CMsM38p8/1.png"
            user = await DB.get_user(ds_id=interaction.author.id)
            await convert(user, embed_dict)

        await interaction.response.send_message(embed=disnake.Embed.from_dict(embed_dict))

    @commands.cooldown(1, 5)
    @commands.slash_command(description="–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –æ—á–∫–∞–º")
    async def —Ç–æ–ø(self, interaction: disnake.ApplicationCommandInteraction):
        """Sending a leaderboard of members by points"""
        settings = await guild_sets_check(interaction.guild.id, "GENERAL", "SCORES")
        if await is_none(interaction, settings):
            return

        await interaction.response.send_message("–°–µ–∫—É–Ω–¥—É...")

        embed_dict = {
            "title": "–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –æ—á–∫–∞–º: üìä",
            "description": "",
            "fields": [],
            "color": 0x2B2D31,
            "footer": {
                "text": interaction.guild.name,
            },
        }
        try:
            embed_dict["footer"]["icon_url"] = interaction.guild.icon.url
        except AttributeError:
            embed_dict["footer"]["icon_url"] = "https://i.postimg.cc/CMsM38p8/1.png"
        embed_dict = await top_create_embed(self.bot, settings, embed_dict)

        await interaction.edit_original_response(
            content="", embed=disnake.Embed.from_dict(embed_dict)
        )

    @—Ç–æ–ø.error
    async def on_test_error(
        self, interaction: disnake.Interaction, error: commands.CommandError
    ):
        if isinstance(error, commands.CommandOnCooldown):
            await interaction.response.send_message(
                "–ù—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å...", delete_after=5, ephemeral=True
            )

    # @commands.slash_command(
    #     description="–°–±—Ä–æ—Å –≤—Å–µ—Ö –æ—á–∫–æ–≤ (–ø–∞—Ä–æ–ª—å)",
    #     default_member_permissions=disnake.Permissions(administrator=True),
    # )
    # async def reset(
    #     self, interaction: disnake.ApplicationCommandInteraction, –ø–∞—Ä–æ–ª—å: int
    # ):
    #     """Resetting scores database and making backup"""
    #     settings = await guild_sets_check(interaction.guild.id, "GENERAL", "SCORES")
    #     if is_none(interaction, settings):
    #         return
    #
    #     if –ø–∞—Ä–æ–ª—å == settings["GENERAL"]["PASSWORD"]:
    #         top = await DB.get_top_users_by_scores()
    #         top_dict = {}
    #         for user in top:
    #             top_dict[str(user.ds_id)] = [user.username, user.scores]
    #             await DB.update_user(ds_id=user.ds_id, username=user.username, scores=0)
    #
    #         with open(
    #             f"{FOLDER}/data/backups/backup_{date.today()}.json",
    #             "w",
    #             encoding="utf-8",
    #         ) as f:
    #             dump(top_dict, f)
    #         await interaction.response.send_message(
    #             f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω–∞, –±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω `{date.today()}`"
    #         )
    #
    #     else:
    #         await interaction.response.send_message(
    #             "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å... –¢—ã –≤–æ—Ä?", delete_after=30
    #         )
    #
    # @commands.slash_command(
    #     description="–í–µ—Ä–Ω—É—Ç—å —Å–±—Ä–æ—à–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –±–µ–∫–∞–ø—É (–ø–∞—Ä–æ–ª—å)",
    #     default_member_permissions=disnake.Permissions(administrator=True),
    # )
    # async def load_backup(
    #     self,
    #     interaction: disnake.ApplicationCommandInteraction,
    #     –ø–∞—Ä–æ–ª—å: int,
    #     backup_date=None,
    # ):
    #     settings = await guild_sets_check(interaction.guild.id, "GENERAL", "SCORES")
    #     if is_none(interaction, settings):
    #         return
    #
    #     if –ø–∞—Ä–æ–ª—å == settings["GENERAL_SETTINGS"]["PASSWORD"]:
    #         if backup_date is None:
    #             for i in range(100):
    #                 day = datetime.timedelta(i)
    #                 try:
    #                     with open(
    #                         f"{FOLDER}/data/backups/backup_{date.today() - day}.json",
    #                         "r",
    #                         encoding="utf-8",
    #                     ) as f:
    #                         data = load(f)
    #                 except json.JSONDecodeError:
    #                     pass
    #                 else:
    #                     break
    #         else:
    #             try:
    #                 with open(
    #                     f"{FOLDER}/data/backups/backup_{backup_date}.json",
    #                     "r",
    #                     encoding="utf-8",
    #                 ) as f:
    #                     data = load(f)
    #             except json.JSONDecodeError:
    #                 await interaction.response.send_message(
    #                     "–ë—ç–∫–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω", ephemeral=True
    #                 )
    #                 return
    #
    #         for ds_id, other in data.items():
    #             user = await DB.get_user({"ds_id": int(ds_id)})
    #             if not user:
    #                 await DB.add_user(
    #                     {"ds_id": ds_id, "username": other[0], "scores": other[1]}
    #                 )
    #             else:
    #                 await DB.update_user(
    #                     {
    #                         "ds_id": user.ds_id,
    #                         "username": user.username,
    #                         "scores": other[1],
    #                     }
    #                 )
    #
    #         await interaction.response.send_message("–ë–µ–∫–∞–ø –∑–∞–≥—Ä—É–∂–µ–Ω", ephemeral=True)
    #
    #     else:
    #         await interaction.response.send_message(
    #             "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å... –¢—ã –≤–æ—Ä, —Å—É–∫–∞?", delete_after=30
    #         )


def setup(bot: commands.Bot):
    bot.add_cog(ScoresOperations(bot))
    bot.add_cog(SpecialScoresCommands(bot))
