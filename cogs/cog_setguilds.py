import disnake
from disnake.ext import commands
from disnake.ui import View, button, select, Button, Modal, TextInput
from disnake.ui import Select, channel_select
from disnake import SelectOption, ModalInteraction
import datetime
from DB.DataBase import GuildsDBase
from DB.JSONEnc import JsonEncoder
import random
from DB.config_default import GUILD_CONFIG


async def is_admin(member: disnake.Member) -> bool:
    return member.guild_permissions.administrator


async def stud_interaction(interaction: disnake.ApplicationCommandInteraction):
    phrases = [
        "–í—ã–ø–æ–ª–Ω—è—é...",
        "–ü–æ–¥—á–∏–Ω—è—é—Å—å...",
        "–°–µ–∫—É–Ω–¥—É...",
        "–†–µ–∞–ª–∏–∑—É—é...",
        "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é...",
        "–ó–∞–≥—Ä—É–∂–∞—é...",
        "–ò—â—É...",
        "–ó–∞–≤–∞—Ä–∏–≤–∞—é –∫–æ—Ñ–µ...",
        "–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é...",
        "–ü—Ä–∏–¥—É–º—ã–≤–∞—é —à—É—Ç–∫—É...",
        "–†–∞–∑—É–º–µ–µ—Ç—Å—è",
        "–î–∞, –º–æ–π –≥–æ—Å–ø–æ–¥–∏–Ω",
        "–ï—Å—Ç—å —Å—ç—Ä!",
        "–¢–∞–∫ —Ç–æ—á–Ω–æ!",
    ]
    await interaction.response.send_message(
        random.choice(phrases), delete_after=0.01, ephemeral=True
    )


class GuildSettings:
    def __init__(self, interaction: disnake.Interaction, settings):
        self.interaction = interaction
        self.gdb = GuildsDBase()
        self.settings = settings

    async def create_home_view(self):
        await self.interaction.edit_original_response(
            content="",
            embed=disnake.Embed.from_dict(create_hello_embed()),
            view=GuildSetsHomeScreenView(self),
        )

    async def create_welcome_view(self):
        await self.interaction.edit_original_response(
            embed=disnake.Embed.from_dict(create_welcome_embed()),
            view=GuildSetsGreetView(self),
        )

    async def create_farewell_view(self):
        await self.interaction.edit_original_response(
            embed=disnake.Embed.from_dict(create_farewell_embed()),
            view=GuildSetsFarewellView(self),
        )

    async def create_feedback_view(self):
        await self.interaction.edit_original_response(
            embed=disnake.Embed.from_dict(create_feedback_embed()),
            view=GuildSetsFeedbackView(self),
        )

    async def create_scores_exp_view(self):
        await self.interaction.edit_original_response(
            embed=disnake.Embed.from_dict((create_scores_exp_embed())),
            view=GuildSetsScoresExpView(self),
        )

    async def create_games_view(self):
        await self.interaction.edit_original_response(
            embed=disnake.Embed.from_dict((create_games_embed())),
            view=GuildSetsGamesView(self),
        )

    async def create_blackjack_view(self):
        await self.interaction.edit_original_response(
            embed=disnake.Embed.from_dict((create_blackjack_embed())),
            view=SetBlackJackView(self),
        )

    async def create_roulette_view(self):
        await self.interaction.edit_original_response(
            embed=disnake.Embed.from_dict((create_roulette_embed())),
            view=SetRouletteView(self),
        )

    async def create_nearest_events_view(self):
        await self.interaction.edit_original_response(
            embed=disnake.Embed.from_dict((create_nearest_event_embed())),
            view=GuildSetNearestEventsView(self),
        )

    async def create_moderation_view(self):
        await self.interaction.edit_original_response(
            embed=disnake.Embed.from_dict((create_moderation_embed())),
            view=GuildSetModerationView(self),
        )

    async def create_auto_reactions_threads_view(self):
        await GuildSetReactionsThreadsView(self).send_view()


class GuildSetsHomeScreenView(View):
    def __init__(self, parent):
        super().__init__(timeout=3600)
        self.parent = parent

    @select(
        custom_id="home_screen",
        min_values=1,
        max_values=1,
        placeholder="–ß—Ç–æ —Ö–æ—á–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å?",
        options=[
            SelectOption(
                label="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
                description="–ù–∞—Å—Ç—Ä–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
                emoji="üôã‚Äç‚ôÇÔ∏è",
                value="greetings",
            ),
            SelectOption(
                label="–ü—Ä–æ—â–∞–Ω–∏–µ",
                description="–ù–∞—Å—Ç—Ä–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–æ—â–∞–Ω–∏–µ",
                emoji="üëã",
                value="farewell",
            ),
            SelectOption(
                label="–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å",
                description="–ü–æ–ª—É—á–∏ –æ—Ç–∑—ã–≤—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å–≤–æ–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞",
                emoji="ü§ô",
                value="feedback",
            ),
            SelectOption(
                label="–û—á–∫–∏ –∏ –æ–ø—ã—Ç",
                description="–ü–æ–ø—Ä–æ–±—É–π –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É –æ—á–∫–æ–≤ –∏ –æ–ø—ã—Ç–∞",
                emoji="ü™ô",
                value="scores_exp",
            ),
            SelectOption(
                label="–ò–≥—Ä—ã",
                description="–ù–∞—Å—Ç—Ä–æ–π –∏–≥—Ä—ã –∫–∞–∫ –ø–æ–∂–µ–ª–∞–µ—à—å",
                emoji="üéÆ",
                value="games",
            ),
            SelectOption(
                label="–ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è",
                description="–ü–æ–∫–∞–∑ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π –≤ —á–∞—Ç–µ",
                emoji="üì¢",
                value="nearest_events",
            ),
            SelectOption(
                label="–ú–æ–¥–µ—Ä–∞—Ü–∏—è",
                description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
                emoji="‚öôÔ∏è",
                value="moderation",
            ),
            SelectOption(
                label="–ê–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏–∏ –∏ –∞–≤—Ç–æ–≤–µ—Ç–∫–∏",
                description="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏—è–º–∏ –∏ –≤–µ—Ç–∫–∞–º–∏",
                emoji="üå≥",
                value="adding_reactions_threads",
            ),
        ],
    )
    async def select_set_callback(
        self, selectMenu: Select, interaction: disnake.ApplicationCommandInteraction
    ):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return

        value = selectMenu.values[0]
        if value == "greetings":
            await stud_interaction(interaction)
            await GuildSettings.create_welcome_view(self.parent)

        elif value == "farewell":
            await stud_interaction(interaction)
            await GuildSettings.create_farewell_view(self.parent)

        elif value == "feedback":
            await stud_interaction(interaction)
            await GuildSettings.create_feedback_view(self.parent)

        elif value == "scores_exp":
            await stud_interaction(interaction)
            await GuildSettings.create_scores_exp_view(self.parent)

        elif value == "games":
            await stud_interaction(interaction)
            await GuildSettings.create_games_view(self.parent)

        elif value == "nearest_events":
            await stud_interaction(interaction)
            await GuildSettings.create_nearest_events_view(self.parent)

        elif value == "moderation":
            await stud_interaction(interaction)
            await GuildSettings.create_moderation_view(self.parent)

        elif value == "adding_reactions_threads":
            await stud_interaction(interaction)
            await GuildSettings.create_auto_reactions_threads_view(self.parent)

    @button(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", style=disnake.ButtonStyle.green)
    async def save_callback(self, button: Button, interaction: disnake.Interaction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return

    @button(label="–°–±—Ä–æ—Å–∏—Ç—å", style=disnake.ButtonStyle.danger)
    async def reset_callback(self, button: Button, interaction: disnake.Interaction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return


class GuildSetsGreetView(View):
    def __init__(self, parent):
        super().__init__()
        self.parent = parent

    @channel_select(
        channel_types=[disnake.ChannelType.text, disnake.ChannelType.news],
        placeholder="–í –∫–∞–∫–æ–º –∫–∞–Ω–∞–ª–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å?",
        min_values=0,
    )
    async def callback(self, selectMenu: Select, interaction: disnake.Interaction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return

    @button(label="–ù–∞–∑–∞–¥", emoji="üîô", style=disnake.ButtonStyle.danger)
    async def to_back_callback(self, btn: Button, interaction: disnake.Interaction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return
        await stud_interaction(interaction)
        await GuildSettings.create_home_view(self.parent)

    @button(label="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å")
    async def open_greet_set_callback(
        self, btn: Button, interaction: disnake.Interaction
    ):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return

        await interaction.response.send_modal(GreetModal(self.parent))

    @button(label="–í–∫–ª", style=disnake.ButtonStyle.green)
    async def enable_callback(self, btn: Button, interaction: disnake.Interaction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return

    @button(label="–í—ã–∫–ª", style=disnake.ButtonStyle.danger)
    async def disable_callback(self, btn: Button, interaction: disnake.Interaction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return


class GreetModal(Modal):
    def __init__(self, parent):
        self.settings = parent.settings
        options = [
            TextInput(
                label="–ó–∞–≥–æ–ª–æ–≤–æ–∫",
                value=self.settings["WELCOME_SETTINGS"]["EMBED"]["TITLE"],
                min_length=4,
                max_length=75,
                required=True,
                custom_id="title",
            ),
            TextInput(
                label="–°–æ–æ–±—â–µ–Ω–∏–µ",
                value=self.settings["WELCOME_SETTINGS"]["EMBED"]["DESCRIPTION"],
                style=disnake.TextInputStyle.paragraph,
                max_length=256,
                required=False,
                custom_id="description",
            ),
            TextInput(
                label="–ê–≤–∞—Ç–∞—Ä–∫–∞ (–¥–µ—Ñ–æ–ª—Ç–Ω–∞—è)",
                value=self.settings["WELCOME_SETTINGS"]["AVATAR_IF_ERROR"],
                required=False,
                custom_id="url_to_ava",
            ),
            TextInput(
                label="–¢–≤–æ—è –∫–∞—Ä—Ç–∏–Ω–∫–∞",
                value=self.settings["WELCOME_SETTINGS"]["BACKGROUND_IMAGE"],
                required=False,
                custom_id="background_image",
            ),
            TextInput(
                label="–¶–≤–µ—Ç —ç–º–±–µ–¥–∞ (hex)",
                value=hex(self.settings["WELCOME_SETTINGS"]["EMBED"]["COLOR"]),
                required=False,
                custom_id="color",
            ),
        ]
        super().__init__(title="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π", components=options)

    async def callback(self, interaction: ModalInteraction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return
        gdb = GuildsDBase()

        title = interaction.text_values["title"]
        description = interaction.text_values["description"]
        url_to_ava = interaction.text_values["url_to_ava"]
        background_image = interaction.text_values["background_image"]

        self.settings["WELCOME_SETTINGS"]["EMBED"]["TITLE"] = title
        self.settings["WELCOME_SETTINGS"]["EMBED"]["DESCRIPTION"] = description
        self.settings["WELCOME_SETTINGS"]["AVATAR_IF_ERROR"] = url_to_ava
        self.settings["WELCOME_SETTINGS"]["BACKGROUND_IMAGE"] = background_image

        await gdb.update_guild(
            {"guild_id": interaction.guild.id, "guild_sets": self.settings}
        )


class GuildSetsFarewellView(View):
    def __init__(self, parent):
        super().__init__()
        self.parent = parent
        self.settings = parent.settings

    @channel_select(
        channel_types=[disnake.ChannelType.text, disnake.ChannelType.news],
        placeholder="–ì–¥–µ –±—É–¥–µ–º –ø—Ä–æ—â–∞—Ç—å—Å—è?",
        min_values=0,
    )
    async def callback(self, selectMenu: Select, interaction: disnake.Interaction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return

    @button(label="–ù–∞–∑–∞–¥", emoji="üîô", style=disnake.ButtonStyle.danger)
    async def to_back_callback(self, btn: Button, interaction: disnake.Interaction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return
        await stud_interaction(interaction)
        await GuildSettings.create_home_view(self.parent)

    @button(label="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å")
    async def open_farewell_set_callback(
        self, btn: Button, interaction: disnake.Interaction
    ):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return
        await interaction.response.send_modal(FarewellModal(self.settings))

    @button(label="–í–∫–ª", style=disnake.ButtonStyle.green)
    async def enable_callback(self, btn: Button, interaction: disnake.Interaction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return

    @button(label="–í—ã–∫–ª", style=disnake.ButtonStyle.danger)
    async def disable_callback(self, btn: Button, interaction: disnake.Interaction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return


class FarewellModal(Modal):
    def __init__(self, settings):
        self.settings = settings
        components = [
            TextInput(
                style=disnake.TextInputStyle.paragraph,
                label="–°–æ–æ–±—â–µ–Ω–∏–µ",
                value=self.settings["FAREWELL_SETTINGS"]["MESSAGE"],
                max_length=256,
                custom_id="message",
            ),
        ]
        super().__init__(title="–ü—Ä–æ—â–∞–Ω–∏–µ", components=components)


class GuildSetsFeedbackView(View):
    def __init__(self, parent):
        super().__init__()
        self.parent = parent
        self.settings = parent.settings

    @channel_select(
        channel_types=[disnake.ChannelType.text, disnake.ChannelType.news],
        placeholder="–í –∫–∞–∫–æ–º –∫–∞–Ω–∞–ª–µ –±—É–¥–µ–º –æ—Ç–≤–µ—á–∞—Ç—å?",
        min_values=0,
    )
    async def feedback_select_callback(
        self, selectMenu: Select, interaction: disnake.Interaction
    ):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return

    @button(label="–ù–∞–∑–∞–¥", emoji="üîô", style=disnake.ButtonStyle.danger)
    async def to_back_callback(self, btn: Button, interaction: disnake.Interaction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return
        await stud_interaction(interaction)
        await GuildSettings.create_home_view(self.parent)

    @button(label="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å")
    async def open_feedback_set_callback(
        self, btn: Button, interaction: disnake.Interaction
    ):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return
        await interaction.response.send_modal(FeedbackModal(self.settings))

    @button(label="–í–∫–ª", style=disnake.ButtonStyle.green)
    async def enable_callback(self, btn: Button, interaction: disnake.Interaction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return

    @button(label="–í—ã–∫–ª", style=disnake.ButtonStyle.danger)
    async def disable_callback(self, btn: Button, interaction: disnake.Interaction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return


class FeedbackModal(Modal):
    def __init__(self, settings):
        self.settings = settings
        components = [
            TextInput(
                style=disnake.TextInputStyle.paragraph,
                label="–°–æ–æ–±—â–µ–Ω–∏–µ",
                custom_id="message",
                max_length=512,
            )
        ]
        super().__init__(title="–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", components=components)


class GuildSetsScoresExpView(View):
    def __init__(self, parent):
        super().__init__()
        self.parent = parent
        self.settings = parent.settings

    @button(label="–ù–∞–∑–∞–¥", emoji="üîô", style=disnake.ButtonStyle.danger)
    async def to_back_callback(self, btn: Button, interaction: disnake.Interaction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return
        await stud_interaction(interaction)
        await GuildSettings.create_home_view(self.parent)

    @button(label="–í–∫–ª", style=disnake.ButtonStyle.green)
    async def enable_callback(self, btn: Button, interaction: disnake.Interaction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return

    @button(label="–í—ã–∫–ª", style=disnake.ButtonStyle.danger)
    async def disable_callback(self, btn: Button, interaction: disnake.Interaction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return


class GuildSetsGamesView(View):
    def __init__(self, parent):
        super().__init__()
        self.parent = parent
        self.settings = parent.settings

    @select(
        custom_id="select_game",
        min_values=1,
        max_values=1,
        placeholder="–ß—Ç–æ —Ö–æ—á–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å?",
        options=[
            SelectOption(
                label="BlackJack",
                description="–ù–∞—Å—Ç—Ä–æ–π BlackJack",
                emoji="‚ô†Ô∏è",
                value="blackjack",
            ),
            SelectOption(
                label="–†—É–ª–µ—Ç–∫–∞",
                description="–ù–∞—Å—Ç—Ä–æ–π —Ä—É–ª–µ—Ç–∫—É",
                emoji="‚ô†Ô∏è",
                value="roulette",
            ),
        ],
    )
    async def select_game_callback(
        self, selectMenu: Select, interaction: disnake.ApplicationCommandInteraction
    ):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return
        value = selectMenu.values[0]

        if value == "blackjack":
            await stud_interaction(interaction)
            await GuildSettings.create_blackjack_view(self.parent)

        elif value == "roulette":
            await stud_interaction(interaction)
            await GuildSettings.create_roulette_view(self.parent)

    @button(label="–ù–∞–∑–∞–¥", emoji="üîô", style=disnake.ButtonStyle.danger)
    async def to_back_callback(self, btn: Button, interaction: disnake.Interaction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return
        await stud_interaction(interaction)
        await GuildSettings.create_home_view(self.parent)

    @button(label="–í–∫–ª", style=disnake.ButtonStyle.green)
    async def enable_callback(self, btn: Button, interaction: disnake.Interaction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return

    @button(label="–í—ã–∫–ª", style=disnake.ButtonStyle.danger)
    async def disable_callback(self, btn: Button, interaction: disnake.Interaction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return


class SetBlackJackView(View):
    def __init__(self, parent):
        super().__init__()
        self.parent = parent
        self.settings = parent.settings

    @channel_select(
        channel_types=[disnake.ChannelType.text, disnake.ChannelType.news],
        placeholder="–í –∫–∞–∫–æ–º –∫–∞–Ω–∞–ª–µ –±—É–¥–µ–º –∏–≥—Ä–∞—Ç—å?",
        min_values=0,
    )
    async def select_callback(
        self, selectMenu: Select, interaction: disnake.ApplicationCommandInteraction
    ):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return

    @button(label="–ù–∞–∑–∞–¥", emoji="üîô", style=disnake.ButtonStyle.danger)
    async def to_back_callback(self, btn: Button, interaction: disnake.Interaction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return
        await stud_interaction(interaction)
        await GuildSettings.create_games_view(self.parent)

    @button(label="–í–∫–ª", style=disnake.ButtonStyle.green)
    async def enable_callback(self, btn: Button, interaction: disnake.Interaction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return

    @button(label="–í—ã–∫–ª", style=disnake.ButtonStyle.danger)
    async def disable_callback(self, btn: Button, interaction: disnake.Interaction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return


class SetRouletteView(View):
    def __init__(self, parent):
        super().__init__()
        self.parent = parent
        self.settings = parent.settings

    @channel_select(
        channel_types=[disnake.ChannelType.text, disnake.ChannelType.news],
        placeholder="–í –∫–∞–∫–æ–º –∫–∞–Ω–∞–ª–µ –±—É–¥–µ–º –∏–≥—Ä–∞—Ç—å?",
        min_values=0,
    )
    async def select_callback(
        self, selectMenu: Select, interaction: disnake.ApplicationCommandInteraction
    ):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return

    @button(label="–ù–∞–∑–∞–¥", emoji="üîô", style=disnake.ButtonStyle.danger)
    async def to_back_callback(self, btn: Button, interaction: disnake.Interaction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return
        await stud_interaction(interaction)
        await GuildSettings.create_games_view(self.parent)

    @button(label="–í–∫–ª", style=disnake.ButtonStyle.green)
    async def enable_callback(self, btn: Button, interaction: disnake.Interaction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return

    @button(label="–í—ã–∫–ª", style=disnake.ButtonStyle.danger)
    async def disable_callback(self, btn: Button, interaction: disnake.Interaction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return


class GuildSetNearestEventsView(View):
    def __init__(self, parent):
        super().__init__()
        self.parent = parent
        self.settings = parent.settings

    @channel_select(
        channel_types=[disnake.ChannelType.text, disnake.ChannelType.news],
        placeholder="–ì–¥–µ –±—É–¥–µ–º —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ —Å–æ–±—ã—Ç–∏—è—Ö?",
        min_values=0,
    )
    async def select_callback(
        self, selectMenu: Select, interaction: disnake.ApplicationCommandInteraction
    ):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return

    @button(label="–ù–∞–∑–∞–¥", emoji="üîô", style=disnake.ButtonStyle.danger)
    async def to_back_callback(self, btn: Button, interaction: disnake.Interaction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return
        await stud_interaction(interaction)
        await GuildSettings.create_home_view(self.parent)

    @button(label="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å")
    async def open_farewell_set_callback(
        self, btn: Button, interaction: disnake.Interaction
    ):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return
        await interaction.response.send_modal(NearestEventModal(self.settings))

    @button(label="–í–∫–ª", style=disnake.ButtonStyle.green)
    async def enable_callback(self, btn: Button, interaction: disnake.Interaction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return

    @button(label="–í—ã–∫–ª", style=disnake.ButtonStyle.danger)
    async def disable_callback(self, btn: Button, interaction: disnake.Interaction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return


class NearestEventModal(Modal):
    def __init__(self, settings):
        self.settings = settings
        components = [
            TextInput(
                style=disnake.TextInputStyle.paragraph,
                label="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
                value=", ".join(
                    self.settings["COGS_SETTINGS"]["NEAREST_EVENTS"]["CATEGORIES"]
                ),
                custom_id="message",
                max_length=512,
            )
        ]
        super().__init__(title="–ë–ª–∏–∂–∞–π—à–∏–µ –∏–≤–µ–Ω—Ç—ã", components=components)


class GuildSetModerationView(View):
    def __init__(self, parent):
        super().__init__()
        self.parent = parent
        self.settings = parent.settings

    @channel_select(
        channel_types=[disnake.ChannelType.text, disnake.ChannelType.news],
        placeholder="–í –∫–∞–∫–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö –±—É–¥–µ–º —Å–ª–µ–¥–∏—Ç—å –∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏?",
        min_values=0,
    )
    async def select_callback(
        self, selectMenu: Select, interaction: disnake.ApplicationCommandInteraction
    ):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return

    @button(label="–ù–∞–∑–∞–¥", emoji="üîô", style=disnake.ButtonStyle.danger)
    async def to_back_callback(self, btn: Button, interaction: disnake.Interaction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return
        await stud_interaction(interaction)
        await GuildSettings.create_home_view(self.parent)

    @button(label="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å")
    async def open_farewell_set_callback(
        self, btn: Button, interaction: disnake.Interaction
    ):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return
        await interaction.response.send_modal(ModerationModal(self.settings))

    @button(label="–í–∫–ª", style=disnake.ButtonStyle.green)
    async def enable_callback(self, btn: Button, interaction: disnake.Interaction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return

    @button(label="–í—ã–∫–ª", style=disnake.ButtonStyle.danger)
    async def disable_callback(self, btn: Button, interaction: disnake.Interaction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return


class ModerationModal(Modal):
    def __init__(self, settings):
        self.settings = settings
        components = [
            TextInput(
                label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É –≥–∏—Ñ–∫–∞–º–∏",
                value=self.settings["MODERATION_SETTINGS"]["GIF"]["MESSAGES_FOR_GIF"],
                custom_id="message",
                max_length=4,
            )
        ]
        super().__init__(title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏", components=components)


class GuildSetReactionsThreadsView:
    def __init__(self, parent):
        self.parent = parent
        self.settings = parent.settings
        self.count_options = len(self.settings["ADDING_REACTIONS_THREADS_SETTINGS"])
        self.view_manager = View()

        self.home_screen_btn = Button(
            label="–ù–∞–∑–∞–¥", emoji="üîô", style=disnake.ButtonStyle.danger
        )

        self.add_option_btn = Button(label="+", style=disnake.ButtonStyle.green)

        self.view_manager.add_item(self.home_screen_btn)
        self.view_manager.add_item(self.add_option_btn)

        for i in range(1, self.count_options + 1):
            btn = Button(label=str(i))
            btn.callback = self.option_callback
            self.view_manager.add_item(btn)

        self.home_screen_btn.callback = self.home_screen_callback
        self.add_option_btn.callback = self.add_option_callback

    async def home_screen_callback(self, interaction: disnake.Interaction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return
        await stud_interaction(interaction)
        await GuildSettings.create_home_view(self.parent)

    async def add_option_callback(self, interaction: disnake.Interaction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return
        await stud_interaction(interaction)
        await self.parent.interaction.edit_original_response(
            embed=disnake.Embed.from_dict(create_option_embed()),
            view=OptionThreadView(self.parent),
        )

    async def send_view(self):
        await self.parent.interaction.edit_original_response(
            embed=disnake.Embed.from_dict(create_reactions_threads_embed()),
            view=self.view_manager,
        )

    async def option_callback(self, interaction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return


class OptionThreadView(View):
    def __init__(self, parent, option=None):
        super().__init__()
        self.parent = parent
        self.option = option

    @channel_select(
        channel_types=[disnake.ChannelType.text, disnake.ChannelType.news],
        placeholder="–í –∫–∞–∫–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö –±—É–¥–µ–º —Å–ª–µ–¥–∏—Ç—å –∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏?",
        min_values=0,
    )
    async def select_callback(
        self, selectMenu: Select, interaction: disnake.ApplicationCommandInteraction
    ):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return

    @button(label="–ù–∞–∑–∞–¥", emoji="üîô", style=disnake.ButtonStyle.danger)
    async def to_back_callback(self, btn: Button, interaction: disnake.Interaction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return
        await stud_interaction(interaction)
        await GuildSettings.create_auto_reactions_threads_view(self.parent)

    @button(label="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å")
    async def open_farewell_set_callback(
        self, btn: Button, interaction: disnake.Interaction
    ):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return
        await interaction.response.send_modal(OptionThreadModal(self.option))


class OptionThreadModal(Modal):
    def __init__(self, option):
        self.option = option
        components = [
            TextInput(
                label="–ö–æ–¥ —Ä–µ–∞–∫—Ü–∏–∏",
                value="" if self.option is None else self.option["REACTIONS"],
                custom_id="reacts",
            )
        ]
        super().__init__(title="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∞–∫—Ü–∏–π", components=components)


def create_hello_embed():
    embed = {
        "title": "–ü—Ä–∏–≤–µ—Ç",
        "description": "",
        "color": 0x2B2D31,
        "timestamp": datetime.datetime.now().isoformat(),
        "author": None,
        "fields": [
            {
                "name": "",
                "value": "–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å. "
                "–ö–æ–Ω–µ—á–Ω–æ, —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–æ–∑–∂–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞–≤ '/–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞'\n"
                "(–Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –±–æ—Ç–∞ –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Å–µ—Ä–≤–µ—Ä–∞)"
                "–ü–æ–µ—Ö–∞–ª–∏!",
            },
        ],
    }
    return embed


def create_welcome_embed():
    embed = {
        "title": "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
        "description": "–¢—ã –º–æ–∂–µ—à—å –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–≤–æ–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞!",
        "color": 0x2B2D31,
        "timestamp": datetime.datetime.now().isoformat(),
        "author": None,
        "fields": [
            {
                "name": "–ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                "value": "–ß—Ç–æ–±—ã –±–æ—Ç –Ω–∞—á–∞–ª –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª",
            },
            {
                "name": "–ö–∞—Å—Ç–æ–º–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
                "value": "–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å', –≤–≤–µ–¥–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫, —Ç–µ–∫—Å—Ç —Å–≤–æ–µ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –∏—Å–ø–æ–ª—å–∑—É–π! \n"
                "–¢—ã —Ç–∞–∫ –∂–µ –º–æ–∂–µ—à—å —É–ø–æ–º—è–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞—à—ë–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏ {member.mention} –∏–ª–∏ {member} –Ω–∞ —Ç–æ –º–µ—Å—Ç–æ, –≥–¥–µ –µ–≥–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–ø–æ–º—è–Ω—É—Ç—å. \n",
            },
            {
                "name": "–ö–∞—Å—Ç–æ–º–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏",
                "value": "–ò–Ω–æ–≥–¥–∞ –∞–≤–∞—Ç–∞—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç –Ω–µ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å. –î–ª—è —Ç–∞–∫–∏—Ö —Å–ª—É—á–∞–µ —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –∞–≤–∞—Ç–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ. –ü—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É! \n"
                "–•–æ—á–µ—à—å —á—Ç–æ–±—ã —Ç–≤–æ—ë –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±—ã–ª–æ –æ—Å–æ–±–µ–Ω–Ω—ã–º? –¢–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ–π —Ñ–æ–Ω –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π!",
            },
        ],
    }
    return embed


def create_farewell_embed():
    embed = {
        "title": "–ü—Ä–æ—â–∞–Ω–∏–µ",
        "description": "–ù–µ –∑–∞–±—É–¥—å –ø–æ–ø—Ä–æ—â–∞—Ç—å—Å—è —Å —Ç–µ–º–∏, –∫—Ç–æ —É—à—ë–ª!",
        "color": 0x2B2D31,
        "timestamp": datetime.datetime.now().isoformat(),
        "author": None,
        "fields": [
            {
                "name": "–ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                "value": "–ù–µ –∑–∞–±—É–¥—å –≤—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ—â–∞–Ω–∏–π",
            },
            {
                "name": "–ö–∞—Å—Ç–æ–º–Ω–æ–µ –ø—Ä–æ—â–∞–Ω–∏–µ",
                "value": "–¢—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∫ –∏ –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è—Ö. –ù–∞ –≤—ã–±–æ—Ä: {member.mention}, {member.nick}, {member.name}, {member}.\n"
                "–¢—ã —Ç–æ—á–Ω–æ —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ",
            },
        ],
    }
    return embed


def create_feedback_embed():
    embed = {
        "title": "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å",
        "description": "–ü–æ–ª—É—á–∞–π –æ—Ç–∑—ã–≤—ã –∏ –∂–∞–ª–æ–±—ã",
        "color": 0x2B2D31,
        "timestamp": datetime.datetime.now().isoformat(),
        "author": None,
        "fields": [
            {
                "name": "–ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                "value": "–í—ã–±–µ—Ä–∏ –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–≤–µ—Ç–∞",
            },
            {
                "name": "–ö–∞—Å—Ç–æ–º–Ω–æ–µ –ø—Ä–æ—â–∞–Ω–∏–µ",
                "value": "–¢—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∫ –∏ –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è—Ö. –ù–∞ –≤—ã–±–æ—Ä: {member.mention}, {member.nick}, {member.name}, {member}.\n"
                "–¢—ã —Ç–æ—á–Ω–æ —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ",
            },
        ],
    }
    return embed


def create_scores_exp_embed():
    embed = {
        "title": "–û—á–∫–∏ –∏ –æ–ø—ã—Ç",
        "description": "–°–∏—Å—Ç–µ–º–∞ –æ—á–∫–æ–≤ –∏ –æ–ø—ã—Ç–∞",
        "color": 0x2B2D31,
        "timestamp": datetime.datetime.now().isoformat(),
        "author": None,
        "fields": [
            {
                "name": "–ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                "value": "–ù–∞–∂–º–∏ '–í–∫–ª', –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –æ—á–∫–æ–≤ –∏ –æ–ø—ã—Ç–∞ –Ω–∞ —Å–≤–æ—ë–º —Å–µ—Ä–≤–µ—Ä–µ",
            },
        ],
    }

    return embed


def create_games_embed():
    embed = {
        "title": "–ò–≥—Ä—ã",
        "description": "–ù–∞—Å—Ç—Ä–æ–π –∏–≥—Ä—ã",
        "color": 0x2B2D31,
        "timestamp": datetime.datetime.now().isoformat(),
        "author": None,
        "fields": [
            {
                "name": "–ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                "value": "–ù–∞–∂–º–∏ '–í–∫–ª', –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –æ—á–∫–æ–≤ –∏ –æ–ø—ã—Ç–∞ –Ω–∞ —Å–≤–æ—ë–º —Å–µ—Ä–≤–µ—Ä–µ",
            },
            {
                "name": "–ù–∞—Å—Ç—Ä–æ–π –∏—Ö –æ—Ç–¥–µ–ª—å–Ω–æ",
                "value": "–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å",
            },
        ],
    }

    return embed


def create_blackjack_embed():
    embed = {
        "title": "BlackJack",
        "description": "–ù–∞—Å—Ç—Ä–æ–π –∏–≥—Ä—ã",
        "color": 0x2B2D31,
        "timestamp": datetime.datetime.now().isoformat(),
        "author": None,
        "fields": [
            {
                "name": "–ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                "value": "–ù–∞–∂–º–∏ '–í–∫–ª', –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –æ—á–∫–æ–≤ –∏ –æ–ø—ã—Ç–∞ –Ω–∞ —Å–≤–æ—ë–º —Å–µ—Ä–≤–µ—Ä–µ",
            },
            {
                "name": "–ù–∞—Å—Ç—Ä–æ–π Blackjack",
                "value": "–í—ã–±–µ—Ä–∏ –∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –∏–≥—Ä–∞—Ç—å",
            },
        ],
    }

    return embed


def create_roulette_embed():
    embed = {
        "title": "Roulette",
        "description": "–ù–∞—Å—Ç—Ä–æ–π –∏–≥—Ä—ã",
        "color": 0x2B2D31,
        "timestamp": datetime.datetime.now().isoformat(),
        "author": None,
        "fields": [
            {
                "name": "–ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                "value": "–ù–∞–∂–º–∏ '–í–∫–ª', –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –æ—á–∫–æ–≤ –∏ –æ–ø—ã—Ç–∞ –Ω–∞ —Å–≤–æ—ë–º —Å–µ—Ä–≤–µ—Ä–µ",
            },
            {
                "name": "–ù–∞—Å—Ç—Ä–æ–π —Ä—É–ª–µ—Ç–∫—É",
                "value": "–í—ã–±–µ—Ä–∏ –∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –∏–≥—Ä–∞—Ç—å",
            },
        ],
    }

    return embed


def create_nearest_event_embed():
    embed = {
        "title": "–ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è",
        "description": "–ù–∞—Å—Ç—Ä–æ–π –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π",
        "color": 0x2B2D31,
        "timestamp": datetime.datetime.now().isoformat(),
        "author": None,
        "fields": [
            {
                "name": "–ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                "value": "–ù–∞–∂–º–∏ '–í–∫–ª', –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –æ—á–∫–æ–≤ –∏ –æ–ø—ã—Ç–∞ –Ω–∞ —Å–≤–æ—ë–º —Å–µ—Ä–≤–µ—Ä–µ",
            },
            {
                "name": "–ù–∞—Å—Ç—Ä–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏–π",
                "value": "–í—ã–±–µ—Ä–∏ –∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –∏–≥—Ä–∞—Ç—å",
            },
        ],
    }

    return embed


def create_moderation_embed():
    embed = {
        "title": "–ú–æ–¥–µ—Ä–∞—Ü–∏—è",
        "description": "–ù–∞—Å—Ç—Ä–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏—é",
        "color": 0x2B2D31,
        "timestamp": datetime.datetime.now().isoformat(),
        "author": None,
        "fields": [
            {
                "name": "–ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                "value": "–ù–∞–∂–º–∏ '–í–∫–ª', –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –æ—á–∫–æ–≤ –∏ –æ–ø—ã—Ç–∞ –Ω–∞ —Å–≤–æ—ë–º —Å–µ—Ä–≤–µ—Ä–µ",
            },
            {
                "name": "–ù–∞—Å—Ç—Ä–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏–π",
                "value": "–í—ã–±–µ—Ä–∏ –∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –∏–≥—Ä–∞—Ç—å",
            },
        ],
    }

    return embed


def create_reactions_threads_embed():
    embed = {
        "title": "–ê–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏–∏ –∏ –∞–≤—Ç–æ–≤–µ—Ç–∫–∏",
        "description": "–ù–∞—Å—Ç—Ä–æ–π –≤–æ—Ç —ç—Ç–æ –≤–æ—Ç",
        "color": 0x2B2D31,
        "timestamp": datetime.datetime.now().isoformat(),
        "author": None,
        "fields": [
            {
                "name": "–ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                "value": "–ù–∞–∂–º–∏ '–í–∫–ª', –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –æ—á–∫–æ–≤ –∏ –æ–ø—ã—Ç–∞ –Ω–∞ —Å–≤–æ—ë–º —Å–µ—Ä–≤–µ—Ä–µ",
            },
            {
                "name": "–ù–∞—Å—Ç—Ä–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏–π",
                "value": "–í—ã–±–µ—Ä–∏ –∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –∏–≥—Ä–∞—Ç—å",
            },
        ],
    }

    return embed


def create_option_embed():
    embed = {
        "title": "–ü–µ–∑–¥–µ—Ü —á—ë –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç",
        "description": "–ù–∞—Å—Ç—Ä–æ–π –≤–æ—Ç —ç—Ç–æ –≤–æ—Ç",
        "color": 0x2B2D31,
        "timestamp": datetime.datetime.now().isoformat(),
        "author": None,
        "fields": [
            {
                "name": "–ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                "value": "–ù–∞–∂–º–∏ '–í–∫–ª', –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –æ—á–∫–æ–≤ –∏ –æ–ø—ã—Ç–∞ –Ω–∞ —Å–≤–æ—ë–º —Å–µ—Ä–≤–µ—Ä–µ",
            },
            {
                "name": "–ù–∞—Å—Ç—Ä–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏–π",
                "value": "–í—ã–±–µ—Ä–∏ –∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –∏–≥—Ä–∞—Ç—å",
            },
        ],
    }

    return embed


class GuildsManage(commands.Cog):
    """
    This class will manage bot (client) guilds, configure them
    """

    def __init__(self, bot: commands.Bot) -> None:
        self.bot = bot

    @commands.slash_command(
        name="–Ω–∞—Å—Ç—Ä–æ–π–∫–∞_–±–æ—Ç–∞", description="–ü–æ–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞"
    )
    async def set_guild_settings(
        self, interaction: disnake.ApplicationCommandInteraction
    ):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "You are not an adminüò≤", ephemeral=True
            )
            return

        db = GuildsDBase()
        enc = JsonEncoder()
        data = {
            "guild_id": interaction.guild.id,
            "guild_name": interaction.guild.name,
            "count_members": interaction.guild.member_count,
        }
        guild_sets = await db.add_guild(data)
        if guild_sets:
            set_view = GuildSettings(
                interaction, enc.code_from_json(guild_sets.guild_sets)
            )
            await interaction.send(".")
            await set_view.create_home_view()

    @commands.slash_command(name="add_to_db")
    @commands.is_owner()
    async def add_guild_to_db(self, interaction: disnake.ApplicationCommandInteraction):
        gdb = GuildsDBase()
        data = {
            "guild_id": interaction.guild.id,
            "guild_name": interaction.guild.name,
            "count_members": interaction.guild.member_count,
        }

        for _ in range(5):
            res = await gdb.add_guild(data)
            if res:
                await interaction.response.send_message(f"Success {res}")
                break

    # @commands.Cog.listener()
    # async def on_interaction(self, interaction: disnake.MessageInteraction):
    #     inter = interaction

    @commands.slash_command(name="update_default_sets")
    @commands.is_owner()
    async def update_default_sets(
        self, interaction: disnake.ApplicationCommandInteraction
    ):
        gdb = GuildsDBase()
        enc = JsonEncoder()
        res = await gdb.update_guild(
            {
                "guild_id": interaction.guild.id,
                "guild_sets": enc.code_to_json(GUILD_CONFIG),
            }
        )

        if res:
            await interaction.response.send_message(
                f"Successfully update guild {interaction.guild.name}"
            )


def setup(bot: commands.Bot):
    bot.add_cog(GuildsManage(bot))
