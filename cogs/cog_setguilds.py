import disnake
from disnake.ext import commands
from disnake.ui import View, button, select, Button, Modal, TextInput
from disnake.ui import Select, channel_select
from disnake import SelectOption, ModalInteraction
import datetime
from DB.DataBase import GuildsDBase
from DB.JSONEnc import JsonEncoder


async def stud_interaction(interaction: disnake.ApplicationCommandInteraction):
    await interaction.response.send_message(
        "–í—ã–ø–æ–ª–Ω—è—é...", delete_after=0.1, ephemeral=True
    )


class GuildSettings:
    def __init__(self, interaction: disnake.Interaction, settings):
        self.interaction = interaction
        self.gdb = GuildsDBase()
        self.settings = settings

    async def create_home_view(self):
        await self.interaction.edit_original_response(
            content="",
            embed=disnake.Embed.from_dict(create_hello_embed()),
            view=GuildSetsHomeScreenView(self),
        )

    async def create_welcome_view(self):
        await self.interaction.edit_original_response(
            embed=disnake.Embed.from_dict(create_welcome_cfg()),
            view=GuildSetsGreetView(self, self.settings),
        )

    async def create_farewell_view(self):
        await self.interaction.edit_original_response(
            embed=disnake.Embed.from_dict(create_farewell_cfg()),
            view=GuildSetsFarewellView(self, self.settings),
        )

    async def create_feedback_view(self):
        await self.interaction.edit_original_response(
            embed=disnake.Embed.from_dict(create_feedback_cfg()),
            view=GuildSetsFeedbackView(self, self.settings),
        )

    async def create_scores_exp_view(self):
        await self.interaction.edit_original_response(
            embed=disnake.Embed.from_dict(()),
            view=GuildSetsScoresExpView(self, self.settings),
        )

    async def create_games_view(self):
        await self.interaction.edit_original_response(
            embed=disnake.Embed.from_dict(()),
            view=GuildSetsGamesView(self, self.settings),
        )


class GuildSetsHomeScreenView(View):
    def __init__(self, parent):
        super().__init__(timeout=3600)
        self.parent = parent

    @select(
        custom_id="home_screen",
        min_values=1,
        max_values=1,
        placeholder="–ß—Ç–æ —Ö–æ—á–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å?",
        options=[
            SelectOption(
                label="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
                description="–ù–∞—Å—Ç—Ä–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
                emoji="üôã‚Äç‚ôÇÔ∏è",
                value="greetings",
            ),
            SelectOption(
                label="–ü—Ä–æ—â–∞–Ω–∏–µ",
                description="–ù–∞—Å—Ç—Ä–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–æ—â–∞–Ω–∏–µ",
                emoji="üëã",
                value="farewell",
            ),
            SelectOption(
                label="–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å",
                description="–ü–æ–ª—É—á–∏ –æ—Ç–∑—ã–≤—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å–≤–æ–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞",
                emoji="ü§ô",
                value="feedback",
            ),
            SelectOption(
                label="–û—á–∫–∏ –∏ –æ–ø—ã—Ç",
                description="–ü–æ–ø—Ä–æ–±—É–π –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É –æ—á–∫–æ–≤ –∏ –æ–ø—ã—Ç–∞",
                emoji="ü™ô",
                value="scores_exp",
            ),
            SelectOption(
                label="–ò–≥—Ä—ã",
                description="–ù–∞—Å—Ç—Ä–æ–π –∏–≥—Ä—ã –∫–∞–∫ –ø–æ–∂–µ–ª–∞–µ—à—å",
                emoji="üéÆ",
                value="games",
            ),
            SelectOption(
                label="–ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è",
                description="–ü–æ–∫–∞–∑ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π –≤ —á–∞—Ç–µ",
                emoji="üì¢",
                value="nearest_events",
            ),
            SelectOption(
                label="–ú–æ–¥–µ—Ä–∞—Ü–∏—è",
                description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
                emoji="‚öôÔ∏è",
                value="moderation",
            ),
            SelectOption(
                label="–ê–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏–∏ –∏ –∞–≤—Ç–æ–≤–µ—Ç–∫–∏",
                description="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏—è–º–∏ –∏ –≤–µ—Ç–∫–∞–º–∏",
                emoji="üå≥",
                value="adding_reactions_threads",
            ),
        ],
    )
    async def select_set_callback(
        self, selectMenu: Select, interaction: disnake.ApplicationCommandInteraction
    ):
        value = selectMenu.values[0]
        if value == "greetings":
            await stud_interaction(interaction)
            await GuildSettings.create_welcome_view(self.parent)

        elif value == "farewell":
            await stud_interaction(interaction)
            await GuildSettings.create_farewell_view(self.parent)

        elif value == "feedback":
            await stud_interaction(interaction)
            await GuildSettings.create_feedback_view(self.parent)

        elif value == "scores_exp":
            await stud_interaction(interaction)
            await GuildSettings.create_welcome_view(self.parent)

        elif value == "games":
            await stud_interaction(interaction)
            await GuildSettings.create_welcome_view(self.parent)

        elif value == "nearest_events":
            await stud_interaction(interaction)
            await GuildSettings.create_welcome_view(self.parent)

        elif value == "moderation":
            await stud_interaction(interaction)
            await GuildSettings.create_welcome_view(self.parent)

        elif value == "adding_reactions_threads":
            await stud_interaction(interaction)
            await GuildSettings.create_welcome_view(self.parent)


class GuildSetsGreetView(View):
    def __init__(self, parent, settings):
        super().__init__()
        self.parent = parent
        self.settings = settings

    @channel_select(
        channel_types=[disnake.ChannelType.text, disnake.ChannelType.news],
        placeholder="–í –∫–∞–∫–æ–º –∫–∞–Ω–∞–ª–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å?",
        min_values=0,
    )
    async def callback(self, selectMenu: Select, interaction: disnake.Interaction):
        pass

    @button(label="–ù–∞–∑–∞–¥", emoji="üîô", style=disnake.ButtonStyle.danger)
    async def to_back_callback(self, button: Button, interaction: disnake.Interaction):
        await GuildSettings.create_home_view(self.parent)

    @button(label="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å")
    async def open_greet_set_callback(
        self, button: Button, interaction: disnake.Interaction
    ):
        await interaction.response.send_modal(GreetModal(self.settings))


class GreetModal(Modal):
    def __init__(self, settings):
        self.settings = settings
        options = [
            TextInput(
                label="–ó–∞–≥–æ–ª–æ–≤–æ–∫",
                value=self.settings["WELCOME_SETTINGS"]["EMBED"]["TITLE"],
                min_length=4,
                max_length=75,
                required=True,
                custom_id="title",
            ),
            TextInput(
                label="–°–æ–æ–±—â–µ–Ω–∏–µ",
                value=self.settings["WELCOME_SETTINGS"]["EMBED"]["DESCRIPTION"],
                style=disnake.TextInputStyle.paragraph,
                max_length=256,
                required=False,
                custom_id="description",
            ),
            TextInput(
                label="–ê–≤–∞—Ç–∞—Ä–∫–∞ (–¥–µ—Ñ–æ–ª—Ç–Ω–∞—è)",
                value=self.settings["WELCOME_SETTINGS"]["AVATAR_IF_ERROR"],
                required=False,
                custom_id="url_to_ava",
            ),
            TextInput(
                label="–¢–≤–æ—è –∫–∞—Ä—Ç–∏–Ω–∫–∞",
                value=self.settings["WELCOME_SETTINGS"]["BACKGROUND_IMAGE"],
                required=False,
                custom_id="background_image",
            ),
            TextInput(
                label="–¶–≤–µ—Ç —ç–º–±–µ–¥–∞ (hex)",
                value=hex(self.settings["WELCOME_SETTINGS"]["EMBED"]["COLOR"]),
                required=False,
                custom_id="color",
            ),
        ]
        super().__init__(title="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π", components=options)

    async def callback(self, interaction: ModalInteraction):
        gdb = GuildsDBase()

        title = interaction.text_values["title"]
        description = interaction.text_values["description"]
        url_to_ava = interaction.text_values["url_to_ava"]
        background_image = interaction.text_values["background_image"]

        self.settings["WELCOME_SETTINGS"]["EMBED"]["TITLE"] = title
        self.settings["WELCOME_SETTINGS"]["EMBED"]["DESCRIPTION"] = description
        self.settings["WELCOME_SETTINGS"]["AVATAR_IF_ERROR"] = url_to_ava
        self.settings["WELCOME_SETTINGS"]["BACKGROUND_IMAGE"] = background_image

        await gdb.update_guild(
            {"guild_id": interaction.guild.id, "guild_sets": self.settings}
        )


class GuildSetsFarewellView(View):
    def __init__(self, parent, settings):
        super().__init__()
        self.parent = parent
        self.settings = settings

    @channel_select(
        channel_types=[disnake.ChannelType.text, disnake.ChannelType.news],
        placeholder="–ì–¥–µ –±—É–¥–µ–º –ø—Ä–æ—â–∞—Ç—å—Å—è?",
        min_values=0,
    )
    async def callback(self):
        pass

    @button(label="–ù–∞–∑–∞–¥", emoji="üîô", style=disnake.ButtonStyle.danger)
    async def to_back_callback(self, button: Button, interaction: disnake.Interaction):
        await GuildSettings.create_home_view(self.parent)

    @button(label="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å")
    async def open_farewell_set_callback(
        self, button: Button, interaction: disnake.Interaction
    ):
        await interaction.response.send_modal(FarewellModal(self.settings))


class FarewellModal(Modal):
    def __init__(self, settings):
        self.settings = settings
        components = [
            TextInput(
                label="–°–æ–æ–±—â–µ–Ω–∏–µ",
                value=settings["FAREWELL_SETTINGS"]["MESSAGE"],
                max_length=256,
                custom_id="message",
            ),
        ]
        super().__init__(title="–ü—Ä–æ—â–∞–Ω–∏–µ", components=components)


class GuildSetsFeedbackView(View):
    def __init__(self, parent, settings):
        super().__init__()
        self.parent = parent
        self.settings = settings

    @channel_select(
        channel_types=[disnake.ChannelType.text, disnake.ChannelType.news],
        placeholder="–í –∫–∞–∫–æ–º –∫–∞–Ω–∞–ª–µ –±—É–¥–µ–º –æ—Ç–≤–µ—á–∞—Ç—å?",
        min_values=0,
    )
    async def feedback_select_callback(self):
        pass

    @button(label="–ù–∞–∑–∞–¥", emoji="üîô", style=disnake.ButtonStyle.danger)
    async def to_back_callback(self, button: Button, interaction: disnake.Interaction):
        await GuildSettings.create_home_view(self.parent)

    @button(label="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å")
    async def open_feedback_set_callback(
        self, button: Button, interaction: disnake.Interaction
    ):
        await interaction.response.send_modal(FeedbackModal(self.settings))


class FeedbackModal(Modal):
    def __init__(self, settings):
        self.settings = settings
        components = [
            TextInput(
                label="–°–æ–æ–±—à–µ–Ω–∏–µ",
                custom_id="message",
            )
        ]
        super().__init__(title="–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", components=components)


class GuildSetsScoresExpView(View):
    def __init__(self, parent, settings):
        super().__init__()
        self.parent = parent
        self.settings = settings


class GuildSetsGamesView(View):
    def __init__(self, parent, settings):
        super().__init__()
        self.parent = parent
        self.settings = settings


def create_hello_embed():
    embed = {
        "title": "–ü—Ä–∏–≤–µ—Ç",
        "description": "",
        "color": 0x2B2D31,
        "timestamp": datetime.datetime.now().isoformat(),
        "author": None,
        "fields": [
            {
                "name": "",
                "value": "–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å. "
                "–ö–æ–Ω–µ—á–Ω–æ, —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–æ–∑–∂–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞–≤ '/–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞'\n"
                "(–Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –±–æ—Ç–∞ –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Å–µ—Ä–≤–µ—Ä–∞)"
                "–ü–æ–µ—Ö–∞–ª–∏!",
            },
        ],
    }
    return embed


def create_welcome_cfg():
    embed = {
        "title": "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
        "description": "–¢—ã –º–æ–∂–µ—à—å –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–≤–æ–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞!",
        "color": 0x2B2D31,
        "timestamp": datetime.datetime.now().isoformat(),
        "author": None,
        "fields": [
            {
                "name": "–ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                "value": "–ß—Ç–æ–±—ã –±–æ—Ç –Ω–∞—á–∞–ª –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª",
            },
            {
                "name": "–ö–∞—Å—Ç–æ–º–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
                "value": "–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å', –≤–≤–µ–¥–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫, —Ç–µ–∫—Å—Ç —Å–≤–æ–µ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –∏—Å–ø–æ–ª—å–∑—É–π! \n"
                "–¢—ã —Ç–∞–∫ –∂–µ –º–æ–∂–µ—à—å —É–ø–æ–º—è–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞—à—ë–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏ {member.mention} –∏–ª–∏ {member} –Ω–∞ —Ç–æ –º–µ—Å—Ç–æ, –≥–¥–µ –µ–≥–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–ø–æ–º—è–Ω—É—Ç—å. \n",
            },
            {
                "name": "–ö–∞—Å—Ç–æ–º–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏",
                "value": "–ò–Ω–æ–≥–¥–∞ –∞–≤–∞—Ç–∞—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç –Ω–µ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å. –î–ª—è —Ç–∞–∫–∏—Ö —Å–ª—É—á–∞–µ —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –∞–≤–∞—Ç–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ. –ü—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É! \n"
                "–•–æ—á–µ—à—å —á—Ç–æ–±—ã —Ç–≤–æ—ë –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±—ã–ª–æ –æ—Å–æ–±–µ–Ω–Ω—ã–º? –¢–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ–π —Ñ–æ–Ω –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π!",
            },
        ],
    }
    return embed


def create_farewell_cfg():
    embed = {
        "title": "–ü—Ä–æ—â–∞–Ω–∏–µ",
        "description": "–ù–µ –∑–∞–±—É–¥—å –ø–æ–ø—Ä–æ—â–∞—Ç—å—Å—è —Å —Ç–µ–º–∏, –∫—Ç–æ —É—à—ë–ª!",
        "color": 0x2B2D31,
        "timestamp": datetime.datetime.now().isoformat(),
        "author": None,
        "fields": [
            {
                "name": "–ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                "value": "–ù–µ –∑–∞–±—É–¥—å –≤—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ—â–∞–Ω–∏–π",
            },
            {
                "name": "–ö–∞—Å—Ç–æ–º–Ω–æ–µ –ø—Ä–æ—â–∞–Ω–∏–µ",
                "value": "–¢—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∫ –∏ –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è—Ö. –ù–∞ –≤—ã–±–æ—Ä: {member.mention}, {member.nick}, {member.name}, {member}.\n"
                "–¢—ã —Ç–æ—á–Ω–æ —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ",
            },
        ],
    }
    return embed


def create_feedback_cfg():
    embed = {
        "title": "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å",
        "description": "–ü–æ–ª—É—á–∞–π –æ—Ç–∑—ã–≤—ã –∏ –∂–∞–ª–æ–±—ã",
        "color": 0x2B2D31,
        "timestamp": datetime.datetime.now().isoformat(),
        "author": None,
        "fields": [
            {
                "name": "–ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                "value": "–í—ã–±–µ—Ä–∏ –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–≤–µ—Ç–∞",
            },
            {
                "name": "–ö–∞—Å—Ç–æ–º–Ω–æ–µ –ø—Ä–æ—â–∞–Ω–∏–µ",
                "value": "–¢—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∫ –∏ –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è—Ö. –ù–∞ –≤—ã–±–æ—Ä: {member.mention}, {member.nick}, {member.name}, {member}.\n"
                "–¢—ã —Ç–æ—á–Ω–æ —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ",
            },
        ],
    }
    return embed


class GuildsManage(commands.Cog):
    """
    This class will manage bot (client) guilds, configure them
    """

    def __init__(self, bot: commands.Bot) -> None:
        self.bot = bot

    @commands.slash_command(
        name="–Ω–∞—Å—Ç—Ä–æ–π–∫–∞_–±–æ—Ç–∞", description="–ü–æ–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞"
    )
    @commands.has_permissions(administrator=True)
    async def set_guild_settings(
        self, interaction: disnake.ApplicationCommandInteraction
    ):
        db = GuildsDBase()
        enc = JsonEncoder()
        data = {
            "guild_id": interaction.guild.id,
            "guild_name": interaction.guild.name,
            "count_members": interaction.guild.member_count,
        }
        guild_sets = await db.add_guild(data)
        if guild_sets:
            set_view = GuildSettings(
                interaction, enc.code_from_json(guild_sets.guild_sets)
            )
            await interaction.send(".")
            await set_view.create_home_view()

    @commands.slash_command(name="add_to_db")
    @commands.is_owner()
    async def add_guild_to_db(self, interaction: disnake.ApplicationCommandInteraction):
        gdb = GuildsDBase()
        data = {
            "guild_id": interaction.guild.id,
            "guild_name": interaction.guild.name,
            "count_members": interaction.guild.member_count,
        }

        for _ in range(5):
            res = await gdb.add_guild(data)
            if res:
                await interaction.response.send_message(f"Success {res}")
                break

    # @commands.Cog.listener()
    # async def on_interaction(self, interaction: disnake.MessageInteraction):
    #     inter = interaction


def setup(bot: commands.Bot):
    bot.add_cog(GuildsManage(bot))
