from loguru import logger
import disnake
from disnake.ext import commands
from disnake.ui import View, button, select, Button, Modal, TextInput
from disnake.ui import Select, channel_select
from disnake import SelectOption, ModalInteraction
import datetime
from DB.DataBase import GuildsDBase
from DB.JSONEnc import JsonEncoder
import random
from DB.config_default import GUILD_CONFIG
from DB.models import Guilds
from typing import Union


async def is_admin(member: disnake.Member) -> bool:
    return member.guild_permissions.administrator


async def get_channel_by_id(
    interaction: disnake.ApplicationCommandInteraction, data: Union[int, list[int]]
) -> str:
    if isinstance(data, int):
        return await interaction.guild.fetch_channel(data)
    elif isinstance(data, list):
        channels = []
        if len(data) != 0:
            for id in data:
                if id is not None:
                    channel: disnake.TextChannel = await interaction.guild.fetch_channel(
                        id
                    )
                    channels.append(channel.name)
                else:
                    return "–Ω–µ –∑–∞–¥–∞–Ω"
        else:
            return "–Ω–µ –∑–∞–¥–∞–Ω"

        return ", ".join(channels)
    else:
        return "–Ω–µ –∑–∞–¥–∞–Ω"


async def stud_interaction(interaction: disnake.ApplicationCommandInteraction):
    phrases = [
        "–í—ã–ø–æ–ª–Ω—è—é...",
        "–ü–æ–¥—á–∏–Ω—è—é—Å—å...",
        "–°–µ–∫—É–Ω–¥—É...",
        "–†–µ–∞–ª–∏–∑—É—é...",
        "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é...",
        "–ó–∞–≥—Ä—É–∂–∞—é...",
        "–ò—â—É...",
        "–ó–∞–≤–∞—Ä–∏–≤–∞—é –∫–æ—Ñ–µ...",
        "–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é...",
        "–ü—Ä–∏–¥—É–º—ã–≤–∞—é —à—É—Ç–∫—É...",
        "–†–∞–∑—É–º–µ–µ—Ç—Å—è",
        "–î–∞, –º–æ–π –≥–æ—Å–ø–æ–¥–∏–Ω",
        "–ï—Å—Ç—å —Å—ç—Ä!",
        "–¢–∞–∫ —Ç–æ—á–Ω–æ!",
    ]
    await interaction.response.send_message(
        random.choice(phrases), delete_after=0.01, ephemeral=True
    )


def do_nothing(btn: Button):
    return btn


async def update_sets(self, interaction, switch_to=None):
    self.settings[self.route] = self.w_settings

    res = await self.gdb.update_guild(
        {"guild_id": self.parent.interaction.guild.id, "guild_sets": self.settings}
    )
    if res:
        if switch_to is None:
            await interaction.response.send_message(
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", delete_after=1, ephemeral=True
            )
        elif not switch_to:
            await interaction.response.send_message(
                "–§—É–Ω–∫—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞", delete_after=1, ephemeral=True
            )
        elif switch_to:
            await interaction.response.send_message(
                "–§—É–Ω–∫—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞", delete_after=1, ephemeral=True
            )
    else:
        await interaction.response.send_message(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", delete_after=1, ephemeral=True
        )


async def toggle_set_easy(self, interaction: disnake.MessageInteraction):
    fn_num = int(str(interaction.component.custom_id).strip("fn_"))
    switch_to = True
    if "success" in str(interaction.component.style):
        switch_to = False
    elif "danger" in str(interaction.component.style):
        switch_to = True

    key0 = "GENERAL_SETTINGS"
    if type(self.keys[str(fn_num)]) is list:
        key1 = self.keys[str(fn_num)][0]
        key2 = self.keys[str(fn_num)][1]
        self.parent[str(interaction.guild.id)].settings[key0][key1][key2] = switch_to
    else:
        key1 = self.keys[str(fn_num)]
        self.parent[str(interaction.guild.id)].settings[key0][key1] = switch_to
    res = await self.gdb.update_guild(
        {
            "guild_id": interaction.guild.id,
            "guild_sets": self.parent[str(interaction.guild.id)].settings,
        }
    )
    if res:
        if switch_to:
            await interaction.response.send_message(
                "–§—É–Ω–∫—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞", delete_after=1, ephemeral=True
            )
        else:
            await interaction.response.send_message(
                "–§—É–Ω–∫—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞", delete_after=1, ephemeral=True
            )
        await GuildSettings.create_general_view(self.parent[str(interaction.guild.id)])
    else:
        await interaction.response.send_message(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", delete_after=1, ephemeral=True
        )

        logger.debug(
            f"Set {self.keys[str(fn_num)]} for guild {interaction.guild.name} was switched to False"
        )


async def toggle_set(self, interaction: disnake.MessageInteraction, switch_to: bool):
    if hasattr(self, "s_toggle"):
        self.settings["GENERAL_SETTINGS"][self.toggle][self.s_toggle] = switch_to

    elif hasattr(self, "v_toggle"):
        self.settings["GENERAL_SETTINGS"][self.toggle] = switch_to
        self.settings["GENERAL_SETTINGS"][self.v_toggle] = switch_to

    else:
        self.settings["GENERAL_SETTINGS"][self.toggle] = switch_to

    res = await self.gdb.update_guild(
        {"guild_id": interaction.guild.id, "guild_sets": self.settings}
    )
    if res:
        if switch_to:
            await interaction.response.send_message(
                "–§—É–Ω–∫—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞", delete_after=1, ephemeral=True
            )
        else:
            await interaction.response.send_message(
                "–§—É–Ω–∫—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞", delete_after=1, ephemeral=True
            )
    else:
        await interaction.response.send_message(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", delete_after=1, ephemeral=True
        )


class GuildSettings:
    def __init__(self, interaction: disnake.Interaction, settings):
        self.interaction: disnake.Interaction = interaction
        self.settings: dict = settings
        self.gdb: GuildsDBase = GuildsDBase()
        self.enc: JsonEncoder = JsonEncoder()

    async def create_home_view(self):
        await self.interaction.edit_original_response(
            content="",
            embed=disnake.Embed.from_dict(create_hello_embed()),
            view=GuildSetsHomeScreenView(self),
        )

    async def create_general_view(self):
        data = await self.gdb.get_guild({"guild_id": self.interaction.guild.id})
        components = GuildSetsGeneralView(self).components
        await self.interaction.edit_original_response(
            embed=disnake.Embed.from_dict(
                create_general_embed(self.enc.code_from_json(data.guild_sets))
            ),
            components=components,
        )

    async def create_welcome_view(self):
        await self.interaction.edit_original_response(
            embed=disnake.Embed.from_dict(create_welcome_embed()),
            view=GuildSetsGreetView(self),
        )

    async def create_farewell_view(self):
        await self.interaction.edit_original_response(
            embed=disnake.Embed.from_dict(create_farewell_embed()),
            view=GuildSetsFarewellView(self),
        )

    async def create_feedback_view(self):
        await self.interaction.edit_original_response(
            embed=disnake.Embed.from_dict(create_feedback_embed()),
            view=GuildSetsFeedbackView(self),
        )

    async def create_scores_exp_view(self):
        await self.interaction.edit_original_response(
            embed=disnake.Embed.from_dict((create_scores_exp_embed())),
            view=GuildSetsScoresExpView(self),
        )

    async def create_games_view(self):
        await self.interaction.edit_original_response(
            embed=disnake.Embed.from_dict((create_games_embed())),
            view=GuildSetsGamesView(self),
        )

    async def create_blackjack_view(self):
        await self.interaction.edit_original_response(
            embed=disnake.Embed.from_dict((create_blackjack_embed())),
            view=SetBlackJackView(self),
        )

    async def create_roulette_view(self):
        await self.interaction.edit_original_response(
            embed=disnake.Embed.from_dict((create_roulette_embed())),
            view=SetRouletteView(self),
        )

    async def create_nearest_events_view(self):
        await self.interaction.edit_original_response(
            embed=disnake.Embed.from_dict((create_nearest_event_embed())),
            view=GuildSetNearestEventsView(self),
        )

    async def create_moderation_view(self):
        await self.interaction.edit_original_response(
            embed=disnake.Embed.from_dict((create_moderation_embed())),
            view=GuildSetModerationView(self),
        )

    async def create_auto_reactions_threads_view(self):
        options = await get_channel_by_id(
            self.interaction, [*self.settings["ADDING_REACTIONS_THREADS_SETTINGS"].keys()]
        )
        await GuildSetReactionsThreadsView(self, options).send_view()


class GuildSetsGeneralView:
    def __init__(self, parent):
        self.parent = parent
        self.settings: dict = parent.settings
        self.gdb: GuildsDBase = parent.gdb
        self.components = []

        self.components.append(
            Select(
                custom_id="home_screen",
                min_values=1,
                max_values=1,
                placeholder="–ß—Ç–æ —Ö–æ—á–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å?",
                options=[
                    SelectOption(
                        label="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
                        description="–ù–∞—Å—Ç—Ä–æ–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–æ—Ç–∞",
                        emoji="üëã",
                        value="greetings",
                    ),
                    SelectOption(
                        label="–ü—Ä–æ—â–∞–Ω–∏–µ",
                        description="–ù–∞—Å—Ç—Ä–æ–π –ø—Ä–æ—â–∞–Ω–∏–µ –±–æ—Ç–∞",
                        emoji="üíÄ",
                        value="farewell",
                    ),
                    SelectOption(
                        label="–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏",
                        description="–ù–∞—Å—Ç—Ä–æ–π —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –ª—é–±–æ–º—É –≤–æ–ø—Ä–æ—Å—É",
                        emoji="üìü",
                        value="feedback",
                    ),
                    SelectOption(
                        label="–°–∏—Å—Ç–µ–º–∞ –æ—á–∫–æ–≤ –∏ –°–∏—Å—Ç–µ–º–∞ –æ–ø—ã—Ç–∞",
                        description="–£–¥–æ–±–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                        emoji="üìÄ",
                        value="scores_exp",
                    ),
                    SelectOption(
                        label="–ò–≥—Ä—ã",
                        description="–í–∫–ª—é—á–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–≥—Ä",
                        emoji="üé∞",
                        value="games",
                    ),
                    SelectOption(
                        label="–î–æ—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π",
                        description="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å–∫–∏ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π —Å –∞–≤—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º",
                        emoji="üì¢",
                        value="nearest_events",
                    ),
                    SelectOption(
                        label="–ú–æ–¥–µ—Ä–∞—Ü–∏—è",
                        description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
                        emoji="‚öîÔ∏è",
                        value="moderation",
                    ),
                    SelectOption(
                        label="–ê–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏–∏ –∏ –ê–≤—Ç–æ–≤–µ—Ç–∫–∏",
                        description="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–π –∏ –≤–µ—Ç–æ–∫ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º",
                        emoji="‚ôæÔ∏è",
                        value="adding_reactions_threads",
                    ),
                ],
            )
        )

        place = 1
        for fn, value in parent.settings["GENERAL_SETTINGS"].items():
            if fn == "PASSWORD":
                continue
            print(fn, value)
            if type(value) is bool:
                self.components.append(
                    Button(
                        label=f"{place}",
                        custom_id=f"fn_{place}",
                        style=disnake.ButtonStyle.green
                        if value
                        else disnake.ButtonStyle.red,
                    )
                )
                place += 1
            elif type(value) is dict:
                for k, v in value.items():
                    if k == "ALL_GAMES":
                        continue
                    self.components.append(
                        Button(
                            label=f"{place}",
                            custom_id=f"fn_{place}",
                            style=disnake.ButtonStyle.green
                            if v
                            else disnake.ButtonStyle.red,
                        )
                    )
                    place += 1

        self.components.append(
            Button(
                label=f"–ù–∞–∑–∞–¥",
                emoji="üîô",
                custom_id=f"back",
                style=disnake.ButtonStyle.red,
            )
        )


class GuildSetsHomeScreenView(View):
    def __init__(self, parent):
        super().__init__(timeout=3600)
        self.parent = parent
        self.settings: dict = parent.settings
        self.gdb: GuildsDBase = parent.gdb

    # @select(
    #     custom_id="home_screen",
    #     min_values=1,
    #     max_values=1,
    #     placeholder="–ß—Ç–æ —Ö–æ—á–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å?",
    #     options=["check"],
    # )
    # async def select_set_callback(
    #     self, selectMenu: Select, interaction: disnake.ApplicationCommandInteraction
    # ):
    #     if not await is_admin(interaction.author):
    #         await interaction.response.send_message(
    #             "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
    #         )
    #         return
    #
    #     value = selectMenu.values[0]
    #     if value == "greetings":
    #         await stud_interaction(interaction)
    #         await GuildSettings.create_welcome_view(self.parent)
    #
    #     elif value == "farewell":
    #         await stud_interaction(interaction)
    #         await GuildSettings.create_farewell_view(self.parent)
    #
    #     elif value == "feedback":
    #         await stud_interaction(interaction)
    #         await GuildSettings.create_feedback_view(self.parent)
    #
    #     elif value == "scores_exp":
    #         await stud_interaction(interaction)
    #         await GuildSettings.create_scores_exp_view(self.parent)
    #
    #     elif value == "games":
    #         await stud_interaction(interaction)
    #         await GuildSettings.create_games_view(self.parent)
    #
    #     elif value == "nearest_events":
    #         await stud_interaction(interaction)
    #         await GuildSettings.create_nearest_events_view(self.parent)
    #
    #     elif value == "moderation":
    #         await stud_interaction(interaction)
    #         await GuildSettings.create_moderation_view(self.parent)
    #
    #     elif value == "adding_reactions_threads":
    #         await stud_interaction(interaction)
    #         await GuildSettings.create_auto_reactions_threads_view(self.parent)

    @button(label="–ù–∞—á–∞—Ç—å", style=disnake.ButtonStyle.gray)
    async def start_callback(self, btn: Button, interaction: disnake.MessageInteraction):
        do_nothing(btn)
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            return

        await stud_interaction(interaction)
        await GuildSettings.create_general_view(self.parent)

    @button(label="–°–±—Ä–æ—Å–∏—Ç—å", style=disnake.ButtonStyle.danger)
    async def reset_callback(self, btn: Button, interaction: disnake.Interaction):
        do_nothing(btn)
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            return
        self.settings = self.parent.enc.get_default_cfg()
        res = await self.gdb.update_guild(
            {"guild_id": interaction.guild.id, "guild_sets": self.parent.settings}
        )
        if res:
            await interaction.response.send_message(
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!", delete_after=1, ephemeral=True
            )
        else:
            await interaction.response.send_message(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É :(", delete_after=1, ephemeral=True
            )


class GuildSetsGreetView(View):
    def __init__(self, parent):
        super().__init__()
        self.parent = parent
        self.settings: dict = parent.settings
        self.w_settings: dict = parent.settings["WELCOME_SETTINGS"]
        self.route: str = "WELCOME_SETTINGS"
        self.toggle: str = "WELCOME"
        self.gdb: GuildsDBase = parent.gdb
        self.enc: JsonEncoder = parent.enc

    @channel_select(
        channel_types=[disnake.ChannelType.text, disnake.ChannelType.news],
        placeholder="–í –∫–∞–∫–æ–º –∫–∞–Ω–∞–ª–µ?",
        min_values=0,
        max_values=1,
    )
    async def callback(self, selectMenu: Select, interaction: disnake.Interaction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            logger.debug(f"User {interaction.author.name} is not an admin")
            return
        values = selectMenu.values
        self.w_settings["CHANNEL"] = values[0].id if values is not None else None
        await update_sets(self, interaction)

        logger.debug(
            f"Channel for greetings for guild {interaction.guild.name} was updated"
        )

    @button(label="–ù–∞–∑–∞–¥", emoji="üîô", style=disnake.ButtonStyle.danger)
    async def to_back_callback(self, btn: Button, interaction: disnake.Interaction):
        do_nothing(btn)
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            logger.debug(f"User {interaction.author.name} is not an admin")
            return
        await stud_interaction(interaction)
        await GuildSettings.create_general_view(self.parent)

    @button(label="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å")
    async def open_greet_set_callback(
        self, btn: Button, interaction: disnake.Interaction
    ):
        do_nothing(btn)
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            logger.debug(f"User {interaction.author.name} is not an admin")
            return

        await interaction.response.send_modal(GreetModal(self.parent))

    @button(label="–í–∫–ª", style=disnake.ButtonStyle.green)
    async def enable_callback(self, btn: Button, interaction: disnake.Interaction):
        do_nothing(btn)
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            logger.debug(f"User {interaction.author.name} is not an admin")
            return

        await toggle_set(self, interaction, True)

        logger.debug(
            f"Set WELCOME for guild {interaction.guild.name} was switched to True"
        )

    @button(label="–í—ã–∫–ª", style=disnake.ButtonStyle.danger)
    async def disable_callback(self, btn: Button, interaction: disnake.Interaction):
        do_nothing(btn)
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            logger.debug(f"User {interaction.author.name} is not an admin")
            return

        await toggle_set(self, interaction, switch_to=False)

        logger.debug(
            f"Set WELCOME for guild {interaction.guild.name} was switched to False"
        )


class GreetModal(Modal):
    def __init__(self, parent):
        self.parent = parent
        self.settings = parent.settings
        self.w_settings = self.settings["WELCOME_SETTINGS"]
        self.route = "WELCOME_SETTINGS"
        self.gdb = self.parent.gdb
        options = [
            TextInput(
                label="–ó–∞–≥–æ–ª–æ–≤–æ–∫",
                value=self.w_settings["EMBED"]["TITLE"],
                min_length=4,
                max_length=75,
                required=True,
                custom_id="title",
            ),
            TextInput(
                label="–¢–µ–∫—Å—Ç",
                value=self.w_settings["EMBED"]["DESCRIPTION"],
                style=disnake.TextInputStyle.paragraph,
                max_length=256,
                required=False,
                custom_id="description",
            ),
            TextInput(
                label="–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫—É, –µ—Å–ª–∏ —É —É—á–∞—Å—Ç–Ω–∏–∫–∞ –µ—ë –Ω–µ—Ç",
                value=self.w_settings["AVATAR_IF_ERROR"],
                required=False,
                custom_id="url_to_ava",
            ),
            TextInput(
                label="–§–æ–Ω–æ–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞",
                value=self.w_settings["BACKGROUND_IMAGE"],
                required=False,
                custom_id="background_image",
            ),
            TextInput(
                label="–¶–≤–µ—Ç –±–æ–∫–æ–≤–æ–π –ø–æ–ª–æ—Å–∫–∏ Embed (hex)",
                value=hex(self.w_settings["EMBED"]["COLOR"]),
                required=False,
                custom_id="color",
            ),
        ]
        super().__init__(title="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π", components=options)

    async def callback(self, interaction: ModalInteraction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            logger.debug(f"User {interaction.author.name} is not an admin")
            return

        self.w_settings["EMBED"]["TITLE"] = interaction.text_values["title"]
        self.w_settings["EMBED"]["DESCRIPTION"] = interaction.text_values["description"]
        self.w_settings["AVATAR_IF_ERROR"] = interaction.text_values["url_to_ava"]
        self.w_settings["BACKGROUND_IMAGE"] = interaction.text_values["background_image"]
        self.w_settings["EMBED"]["COLOR"] = int(interaction.text_values["color"], 16)

        await update_sets(self, interaction)


class GuildSetsFarewellView(View):
    def __init__(self, parent):
        super().__init__()
        self.parent = parent
        self.settings: dict = parent.settings
        self.w_settings: dict = parent.settings["FAREWELL_SETTINGS"]
        self.route: str = "FAREWELL_SETTINGS"
        self.toggle: str = "FAREWELL"
        self.gdb: GuildsDBase = parent.gdb
        self.enc: JsonEncoder = parent.enc

    @channel_select(
        channel_types=[disnake.ChannelType.text, disnake.ChannelType.news],
        placeholder="–í –∫–∞–∫–æ–º –∫–∞–Ω–∞–ª–µ?",
        min_values=0,
    )
    async def callback(self, selectMenu: Select, interaction: disnake.Interaction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            logger.debug(f"User {interaction.author.name} is not an admin")
            return
        values = selectMenu.values
        self.w_settings["CHANNEL"] = values[0].id if values is not None else None
        await update_sets(self, interaction)

    @button(label="–ù–∞–∑–∞–¥", emoji="üîô", style=disnake.ButtonStyle.danger)
    async def to_back_callback(self, btn: Button, interaction: disnake.Interaction):
        do_nothing(btn)
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            logger.debug(f"User {interaction.author.name} is not an admin")
            return
        await stud_interaction(interaction)
        await GuildSettings.create_general_view(self.parent)

    @button(label="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å")
    async def open_farewell_set_callback(
        self, btn: Button, interaction: disnake.Interaction
    ):
        do_nothing(btn)
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            logger.debug(f"User {interaction.author.name} is not an admin")
            return
        await interaction.response.send_modal(FarewellModal(self.parent))

    @button(label="–í–∫–ª", style=disnake.ButtonStyle.green)
    async def enable_callback(self, btn: Button, interaction: disnake.Interaction):
        do_nothing(btn)
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            logger.debug(f"User {interaction.author.name} is not an admin")
            return

        await toggle_set(self, interaction, switch_to=True)

        logger.debug(
            f"Set FAREWELL for guild {interaction.guild.name} was switched to True"
        )

    @button(label="–í—ã–∫–ª", style=disnake.ButtonStyle.danger)
    async def disable_callback(self, btn: Button, interaction: disnake.Interaction):
        do_nothing(btn)
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            logger.debug(f"User {interaction.author.name} is not an admin")
            return

        await toggle_set(self, interaction, switch_to=False)

        logger.debug(
            f"Set FAREWELL for guild {interaction.guild.name} was switched to False"
        )


class FarewellModal(Modal):
    def __init__(self, parent):
        self.parent = parent
        self.settings = parent.settings
        self.w_settings = self.settings["FAREWELL_SETTINGS"]
        self.route = "FAREWELL_SETTINGS"
        self.gdb = self.parent.gdb
        components = [
            TextInput(
                style=disnake.TextInputStyle.paragraph,
                label="–°–æ–æ–±—â–µ–Ω–∏–µ",
                value=self.w_settings["MESSAGE"],
                max_length=256,
                custom_id="message",
            ),
        ]
        super().__init__(title="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ü—Ä–æ—â–∞–Ω–∏–π", components=components)

    async def callback(self, interaction: ModalInteraction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            logger.debug(f"User {interaction.author.name} is not an admin")
            return

        self.w_settings["MESSAGE"] = interaction.text_values["message"]

        await update_sets(self, interaction)


class GuildSetsFeedbackView(View):
    def __init__(self, parent):
        super().__init__()
        self.parent = parent
        self.settings: dict = parent.settings
        self.w_settings: dict = parent.settings["COGS_SETTINGS"]
        self.s_settings: dict = parent.settings["COGS_SETTINGS"]["REQUESTS"]
        self.route: str = "COGS_SETTINGS"
        self.toggle: str = "REQUESTS"
        self.gdb: GuildsDBase = parent.gdb
        self.enc: JsonEncoder = parent.enc

    @channel_select(
        channel_types=[disnake.ChannelType.text, disnake.ChannelType.news],
        placeholder="–ì–¥–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤?",
        min_values=0,
    )
    async def channel_select_callback(
        self, selectMenu: Select, interaction: disnake.Interaction
    ):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            logger.debug(f"User {interaction.author.name} is not an admin")
            return

        values = selectMenu.values

        self.s_settings["BUTTONS_MESSAGE"]["CHANNEL"] = values[0].id if values is not None else None
        self.w_settings["REQUESTS"] = self.s_settings

        await update_sets(self, interaction)

    @channel_select(
        channel_types=[disnake.ChannelType.text, disnake.ChannelType.news],
        placeholder="–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã?",
        min_values=0,
    )
    async def admin_select_callback(
        self, selectMenu: Select, interaction: disnake.Interaction
    ):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            logger.debug(f"User {interaction.author.name} is not an admin")
            return

        values = selectMenu.values

        self.s_settings["ADMIN_CHANNEL"] = values[0].id if values is not None else None
        self.w_settings["REQUESTS"] = self.s_settings

        await update_sets(self, interaction)

    @channel_select(
        channel_types=[disnake.ChannelType.text, disnake.ChannelType.news],
        placeholder="–ì–¥–µ –±—É–¥–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å?",
        min_values=0,
    )
    async def logs_select_callback(
        self, selectMenu: Select, interaction: disnake.Interaction
    ):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            logger.debug(f"User {interaction.author.name} is not an admin")
            return

        values = selectMenu.values

        self.s_settings["LOGS_MESSAGE"]["CHANNEL"] = values[0].id if values is not None else None
        self.w_settings["REQUESTS"] = self.s_settings

        await update_sets(self, interaction)

    @button(label="–ù–∞–∑–∞–¥", emoji="üîô", style=disnake.ButtonStyle.danger)
    async def to_back_callback(self, btn: Button, interaction: disnake.Interaction):
        do_nothing(btn)
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            logger.debug(f"User {interaction.author.name} is not an admin")
            return
        await stud_interaction(interaction)
        await GuildSettings.create_general_view(self.parent)

    @button(label="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å")
    async def open_feedback_set_callback(
        self, btn: Button, interaction: disnake.Interaction
    ):
        do_nothing(btn)
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            logger.debug(f"User {interaction.author.name} is not an admin")
            return
        await interaction.response.send_modal(FeedbackModal(self.parent))

    @button(label="–í–∫–ª", style=disnake.ButtonStyle.green)
    async def enable_callback(self, btn: Button, interaction: disnake.Interaction):
        do_nothing(btn)
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            logger.debug(f"User {interaction.author.name} is not an admin")
            return

        await toggle_set(self, interaction, switch_to=True)

        logger.debug(
            f"Set FEEDBACK for guild {interaction.guild.name} was switched to True"
        )

    @button(label="–í—ã–∫–ª", style=disnake.ButtonStyle.danger)
    async def disable_callback(self, btn: Button, interaction: disnake.Interaction):
        do_nothing(btn)
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            logger.debug(f"User {interaction.author.name} is not an admin")
            return

        await toggle_set(self, interaction, switch_to=False)

        logger.debug(
            f"Set FEEDBACK for guild {interaction.guild.name} was switched to False"
        )


class FeedbackModal(Modal):
    def __init__(self, parent):
        self.parent = parent
        self.settings = parent.settings
        self.w_settings: dict = parent.settings["COGS_SETTINGS"]
        self.s_settings: dict = parent.settings["COGS_SETTINGS"]["REQUESTS"]
        self.route: str = "COGS_SETTINGS"
        self.gdb = self.parent.gdb
        components = [
            TextInput(
                style=disnake.TextInputStyle.short,
                value=self.s_settings["BUTTONS_MESSAGE"]["EMBED"]["TITLE"],
                label="–ó–∞–≥–æ–ª–æ–≤–æ–∫",
                custom_id="title",
            ),
            TextInput(
                style=disnake.TextInputStyle.paragraph,
                value=self.s_settings["BUTTONS_MESSAGE"]["EMBED"]["DESCRIPTION"],
                label="–¢–µ–∫—Å—Ç",
                custom_id="description",
                max_length=512,
            ),
            TextInput(
                style=disnake.TextInputStyle.paragraph,
                label="–û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞",
                value=self.s_settings["BUTTONS_MESSAGE"]["CALLBACK"],
                custom_id="set_callback",
                max_length=256,
            ),
            TextInput(
                style=disnake.TextInputStyle.short,
                value=hex(self.s_settings["BUTTONS_MESSAGE"]["EMBED"]["COLOR"]),
                label="–¶–≤–µ—Ç –±–æ–∫–æ–≤–æ–π –ø–æ–ª–æ—Å–∫–∏ Embed (hex)",
                custom_id="color",
            ),
        ]
        super().__init__(title="–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", components=components)

    async def callback(self, interaction: ModalInteraction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            logger.debug(f"User {interaction.author.name} is not an admin")
            return

        self.s_settings["BUTTONS_MESSAGE"]["EMBED"]["TITLE"] = interaction.text_values[
            "title"
        ]
        self.s_settings["BUTTONS_MESSAGE"]["EMBED"][
            "DESCRIPTION"
        ] = interaction.text_values["description"]
        self.s_settings["BUTTONS_MESSAGE"]["CALLBACK"] = interaction.text_values[
            "set_callback"
        ]
        self.s_settings["BUTTONS_MESSAGE"]["EMBED"]["COLOR"] = int(
            interaction.text_values["color"], 16
        )

        self.w_settings["REQUESTS"] = self.s_settings

        await update_sets(self, interaction)


class GuildSetsScoresExpView(View):
    def __init__(self, parent):
        super().__init__()
        self.parent = parent
        self.settings = parent.settings
        self.toggle = "EXPERIENCE"
        self.v_toggle = "SCORES"
        self.gdb: GuildsDBase = parent.gdb

    @button(label="–ù–∞–∑–∞–¥", emoji="üîô", style=disnake.ButtonStyle.danger)
    async def to_back_callback(self, btn: Button, interaction: disnake.Interaction):
        do_nothing(btn)
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            return
        await stud_interaction(interaction)
        await GuildSettings.create_general_view(self.parent)

    @button(label="–í–∫–ª", style=disnake.ButtonStyle.green)
    async def enable_callback(self, btn: Button, interaction: disnake.Interaction):
        do_nothing(btn)
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            return

        await toggle_set(self, interaction, switch_to=True)

        logger.debug(
            f"Set SCORES and EXP for guild {interaction.guild.name} was switched to True"
        )

    @button(label="–í—ã–∫–ª", style=disnake.ButtonStyle.danger)
    async def disable_callback(self, btn: Button, interaction: disnake.Interaction):
        do_nothing(btn)
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            return

        await toggle_set(self, interaction, switch_to=False)

        logger.debug(
            f"Set SCORES and EXP for guild {interaction.guild.name} was switched to False"
        )


class GuildSetsGamesView(View):
    def __init__(self, parent):
        super().__init__()
        self.parent = parent
        self.settings: dict = parent.settings
        self.w_settings: dict = parent.settings["COGS_SETTINGS"]
        self.s_settings: dict = parent.settings["COGS_SETTINGS"]["GAMES"]
        self.route: str = "COGS_SETTINGS"
        self.s_toggle = "ALL_GAMES"
        self.toggle: str = "GAMES"
        self.gdb: GuildsDBase = parent.gdb
        self.enc: JsonEncoder = parent.enc

    @channel_select(
        channel_types=[disnake.ChannelType.text, disnake.ChannelType.news],
        placeholder="–í –∫–∞–∫–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö –¥–æ—Å—Ç—É–ø–Ω—ã –∏–≥—Ä—ã?",
        min_values=0,
        max_values=25,
    )
    async def channel_select_callback(
        self, selectMenu: Select, interaction: disnake.Interaction
    ):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            logger.debug(f"User {interaction.author.name} is not an admin")
            return

        if selectMenu.values is not None:
            channels_id = []
            for value in selectMenu.values:
                channel_id = value.id
                channels_id.append(channel_id)
        else:
            channels_id = None

        self.s_settings["CHANNEL"] = channels_id
        self.w_settings["GAMES"] = self.s_settings

        await update_sets(self, interaction)

    @select(
        custom_id="select_game",
        min_values=1,
        max_values=1,
        placeholder="–ö–∞–∫—É—é –∏–≥—Ä—É –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å?",
        options=[
            SelectOption(
                label="BlackJack",
                emoji="‚ô†Ô∏è",
                value="blackjack",
            ),
            SelectOption(
                label="–†—É–ª–µ—Ç–∫–∞",
                emoji="üé≤",
                value="roulette",
            ),
        ],
    )
    async def select_game_callback(
        self, selectMenu: Select, interaction: disnake.ApplicationCommandInteraction
    ):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            return
        value = selectMenu.values[0]

        if value == "blackjack":
            await stud_interaction(interaction)
            await GuildSettings.create_blackjack_view(self.parent)

        elif value == "roulette":
            await stud_interaction(interaction)
            await GuildSettings.create_roulette_view(self.parent)

    @button(label="–ù–∞–∑–∞–¥", emoji="üîô", style=disnake.ButtonStyle.danger)
    async def to_back_callback(self, btn: Button, interaction: disnake.Interaction):
        do_nothing(btn)
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            return
        await stud_interaction(interaction)
        await GuildSettings.create_general_view(self.parent)

    @button(label="–í–∫–ª", style=disnake.ButtonStyle.green)
    async def enable_callback(self, btn: Button, interaction: disnake.Interaction):
        do_nothing(btn)
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            return

        await toggle_set(self, interaction, switch_to=True)

        logger.debug(f"Set GAMES for guild {interaction.guild.name} was switched to True")

    @button(label="–í—ã–∫–ª", style=disnake.ButtonStyle.danger)
    async def disable_callback(self, btn: Button, interaction: disnake.Interaction):
        do_nothing(btn)
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            return

        await toggle_set(self, interaction, switch_to=False)

        logger.debug(
            f"Set GAMES for guild {interaction.guild.name} was switched to False"
        )


class SetBlackJackView(View):
    def __init__(self, parent):
        super().__init__()
        self.parent = parent
        self.settings = parent.settings
        self.s_toggle = "BLACKJACK"
        self.toggle = "GAMES"
        self.gdb: GuildsDBase = parent.gdb

    @button(label="–ù–∞–∑–∞–¥", emoji="üîô", style=disnake.ButtonStyle.danger)
    async def to_back_callback(self, btn: Button, interaction: disnake.Interaction):
        do_nothing(btn)
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            return
        await stud_interaction(interaction)
        await GuildSettings.create_games_view(self.parent)

    @button(label="–í–∫–ª", style=disnake.ButtonStyle.green)
    async def enable_callback(self, btn: Button, interaction: disnake.Interaction):
        do_nothing(btn)
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            return

        await toggle_set(self, interaction, switch_to=True)

        logger.debug(
            f"Set BLACKJACK for guild {interaction.guild.name} was switched to True"
        )

    @button(label="–í—ã–∫–ª", style=disnake.ButtonStyle.danger)
    async def disable_callback(self, btn: Button, interaction: disnake.Interaction):
        do_nothing(btn)
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            return

        await toggle_set(self, interaction, switch_to=False)

        logger.debug(
            f"Set BLACKJACK for guild {interaction.guild.name} was switched to False"
        )


class SetRouletteView(View):
    def __init__(self, parent):
        super().__init__()
        self.parent = parent
        self.settings = parent.settings
        self.s_toggle = "ROULETTE"
        self.toggle = "GAMES"
        self.gdb: GuildsDBase = parent.gdb

    @button(label="–ù–∞–∑–∞–¥", emoji="üîô", style=disnake.ButtonStyle.danger)
    async def to_back_callback(self, btn: Button, interaction: disnake.Interaction):
        do_nothing(btn)
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            return
        await stud_interaction(interaction)
        await GuildSettings.create_games_view(self.parent)

    @button(label="–í–∫–ª", style=disnake.ButtonStyle.green)
    async def enable_callback(self, btn: Button, interaction: disnake.Interaction):
        do_nothing(btn)
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            return

        await toggle_set(self, interaction, switch_to=True)

        logger.debug(
            f"Set ROULETTE for guild {interaction.guild.name} was switched to True"
        )

    @button(label="–í—ã–∫–ª", style=disnake.ButtonStyle.danger)
    async def disable_callback(self, btn: Button, interaction: disnake.Interaction):
        do_nothing(btn)
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            return

        await toggle_set(self, interaction, switch_to=False)

        logger.debug(
            f"Set ROULETTE for guild {interaction.guild.name} was switched to False"
        )


class GuildSetNearestEventsView(View):
    def __init__(self, parent):
        super().__init__()
        self.parent = parent
        self.settings: dict = parent.settings
        self.w_settings: dict = parent.settings["COGS_SETTINGS"]
        self.s_settings: dict = parent.settings["COGS_SETTINGS"]["NEAREST_EVENTS"]
        self.route: str = "COGS_SETTINGS"
        self.toggle: str = "NEAREST_EVENTS"
        self.gdb: GuildsDBase = parent.gdb
        self.enc: JsonEncoder = parent.enc

    @channel_select(
        channel_types=[disnake.ChannelType.text, disnake.ChannelType.news],
        placeholder="–ì–¥–µ –±—É–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ?",
        min_values=0,
    )
    async def select_callback(
        self, selectMenu: Select, interaction: disnake.ApplicationCommandInteraction
    ):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            return
        values = selectMenu.values
        self.s_settings["CHANNEL"] = values[0].id if values is not None else None

        await update_sets(self, interaction)

    @button(label="–ù–∞–∑–∞–¥", emoji="üîô", style=disnake.ButtonStyle.danger)
    async def to_back_callback(self, btn: Button, interaction: disnake.Interaction):
        do_nothing(btn)
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            return
        await stud_interaction(interaction)
        await GuildSettings.create_general_view(self.parent)

    @button(label="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å")
    async def open_farewell_set_callback(
        self, btn: Button, interaction: disnake.Interaction
    ):
        do_nothing(btn)
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            return
        await interaction.response.send_modal(NearestEventModal(self.parent))

    @button(label="–í–∫–ª", style=disnake.ButtonStyle.green)
    async def enable_callback(self, btn: Button, interaction: disnake.Interaction):
        do_nothing(btn)
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            return

        await toggle_set(self, interaction, switch_to=True)

        logger.debug(
            f"Set NEAREST_EVENTS for guild {interaction.guild.name} was switched to True"
        )

    @button(label="–í—ã–∫–ª", style=disnake.ButtonStyle.danger)
    async def disable_callback(self, btn: Button, interaction: disnake.Interaction):
        do_nothing(btn)
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            return

        await toggle_set(self, interaction, switch_to=False)

        logger.debug(
            f"Set NEAREST_EVENTS for guild {interaction.guild.name} was switched to False"
        )


class NearestEventModal(Modal):
    def __init__(self, parent):
        self.parent = parent
        self.settings = parent.settings
        self.w_settings: dict = parent.settings["COGS_SETTINGS"]
        self.s_settings: dict = parent.settings["COGS_SETTINGS"]["NEAREST_EVENTS"]
        self.route: str = "COGS_SETTINGS"
        self.gdb = self.parent.gdb
        components = [
            TextInput(
                style=disnake.TextInputStyle.paragraph,
                label="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
                value=", ".join(self.s_settings["CATEGORIES"]),
                custom_id="categories",
                max_length=512,
            )
        ]
        super().__init__(title="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –î–æ—Å–∫–∏ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π", components=components)

    async def callback(self, interaction: ModalInteraction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            logger.debug(f"User {interaction.author.name} is not an admin")
            return

        self.s_settings["CATEGORIES"] = interaction.text_values["categories"].split(", ")

        self.w_settings["NEAREST_EVENTS"] = self.s_settings

        await update_sets(self, interaction)


class GuildSetModerationView(View):
    def __init__(self, parent):
        super().__init__()
        self.parent = parent
        self.settings = parent.settings
        self.w_settings: dict = parent.settings["MODERATION_SETTINGS"]
        self.route: str = "MODERATION_SETTINGS"
        self.toggle = "MODERATION"
        self.s_toggle = "GIF"
        self.gdb = self.parent.gdb

    @channel_select(
        channel_types=[disnake.ChannelType.text, disnake.ChannelType.news],
        placeholder="–í –∫–∞–∫–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö –±—É–¥–µ–º —Å–ª–µ–¥–∏—Ç—å –∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏?",
        min_values=0,
        max_values=25,
    )
    async def select_callback(
        self, selectMenu: Select, interaction: disnake.ApplicationCommandInteraction
    ):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            return
        if selectMenu.values is not None:
            channels_id = []
            for value in selectMenu.values:
                channels_id.append(value.id)
        else:
            channels_id = None

        self.w_settings["CHANNEL"] = channels_id

        await update_sets(self, interaction)

    @button(label="–ù–∞–∑–∞–¥", emoji="üîô", style=disnake.ButtonStyle.danger)
    async def to_back_callback(self, btn: Button, interaction: disnake.Interaction):
        do_nothing(btn)
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            return
        await stud_interaction(interaction)
        await GuildSettings.create_general_view(self.parent)

    @button(label="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å")
    async def open_farewell_set_callback(
        self, btn: Button, interaction: disnake.Interaction
    ):
        do_nothing(btn)
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            return
        await interaction.response.send_modal(ModerationModal(self.parent))

    @button(label="–í–∫–ª", style=disnake.ButtonStyle.green)
    async def enable_callback(self, btn: Button, interaction: disnake.Interaction):
        do_nothing(btn)
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            return

        await toggle_set(self, interaction, switch_to=True)

        logger.debug(
            f"Set MODERATION for guild {interaction.guild.name} was switched to True"
        )

    @button(label="–í—ã–∫–ª", style=disnake.ButtonStyle.danger)
    async def disable_callback(self, btn: Button, interaction: disnake.Interaction):
        do_nothing(btn)
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            return

        await toggle_set(self, interaction, switch_to=False)

        logger.debug(
            f"Set MODERATION for guild {interaction.guild.name} was switched to False"
        )


class ModerationModal(Modal):
    def __init__(self, parent):
        self.parent = parent
        self.settings = parent.settings
        self.w_settings: dict = parent.settings["MODERATION_SETTINGS"]
        self.route: str = "MODERATION_SETTINGS"
        self.gdb = self.parent.gdb
        components = [
            TextInput(
                label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É –≥–∏—Ñ–∫–∞–º–∏",
                value=self.w_settings["GIF"]["MESSAGES_FOR_GIF"],
                custom_id="messages_for_gif",
                max_length=4,
            )
        ]
        super().__init__(title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏", components=components)

    async def callback(self, interaction: ModalInteraction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            logger.debug(f"User {interaction.author.name} is not an admin")
            return

        self.w_settings["GIF"]["MESSAGES_FOR_GIF"] = int(
            interaction.text_values["messages_for_gif"]
        )

        await update_sets(self, interaction)


class GuildSetReactionsThreadsView:
    def __init__(self, parent, options):
        self.parent = parent
        self.options = options
        self.settings = parent.settings
        self.channels_id = [*self.settings["ADDING_REACTIONS_THREADS_SETTINGS"].keys()]
        self.toggle = "ADDING_REACTIONS_THREADS"
        self.view_manager = View()

        self.home_screen_btn = Button(
            label="–ù–∞–∑–∞–¥", emoji="üîô", style=disnake.ButtonStyle.danger
        )

        self.add_option_btn = Button(label="+", style=disnake.ButtonStyle.green)

        self.view_manager.add_item(self.home_screen_btn)
        self.view_manager.add_item(self.add_option_btn)

        if self.options != "–Ω–µ –∑–∞–¥–∞–Ω":
            self.options = self.options.split(", ")
        else:
            self.options = []

        for i in range(len(self.channels_id)):
            btn = Button(label=self.options[i], custom_id=self.channels_id[i])
            self.view_manager.add_item(btn)
            btn.callback = self.option_callback

        self.home_screen_btn.callback = self.home_screen_callback
        self.add_option_btn.callback = self.add_option_callback

    async def home_screen_callback(self, interaction: disnake.MessageInteraction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            return
        await stud_interaction(interaction)
        await GuildSettings.create_general_view(self.parent)

    async def add_option_callback(self, interaction: disnake.MessageInteraction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            return
        await stud_interaction(interaction)
        await self.parent.interaction.edit_original_response(
            embed=disnake.Embed.from_dict(create_option_embed()),
            view=OptionThreadView(self.parent),
        )

    async def send_view(self):
        await self.parent.interaction.edit_original_response(
            embed=disnake.Embed.from_dict(create_reactions_threads_embed()),
            view=self.view_manager,
        )

    async def option_callback(self, interaction: disnake.MessageInteraction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            return
        option = interaction.component.custom_id
        channel = interaction.component.label
        await stud_interaction(interaction)
        await self.parent.interaction.edit_original_response(
            embed=disnake.Embed.from_dict(create_option_embed(channel)),
            view=OptionThreadView(self.parent, option=option),
        )


class OptionThreadView(View):
    def __init__(self, parent, option=None):
        super().__init__()
        self.parent = parent
        self.option = option
        self.settings = parent.settings
        self.w_settings: dict = parent.settings["ADDING_REACTIONS_THREADS_SETTINGS"]
        self.route: str = "ADDING_REACTIONS_THREADS_SETTINGS"
        self.gdb = self.parent.gdb

    @channel_select(
        channel_types=[disnake.ChannelType.text, disnake.ChannelType.news],
        placeholder="–í –∫–∞–∫–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö –±—É–¥–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å —Ä–µ–∞–∫—Ü–∏–∏ –∏ –≤–µ—Ç–∫–∏?",
        min_values=1,
        max_values=1,
    )
    async def select_callback(
        self, selectMenu: Select, interaction: disnake.ApplicationCommandInteraction
    ):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            return

        if self.option is None:
            self.w_settings[selectMenu.values[0].id] = {"REACTIONS": [], "THREAD": False}
        else:
            self.w_settings[selectMenu.values[0].id] = self.w_settings.pop(self.option)

        values = selectMenu.values
        self.option = values[0].id 

        await update_sets(self, interaction)

    @button(label="–ù–∞–∑–∞–¥", emoji="üîô", style=disnake.ButtonStyle.danger)
    async def to_back_callback(self, btn: Button, interaction: disnake.Interaction):
        do_nothing(btn)
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            return
        await stud_interaction(interaction)
        await GuildSettings.create_auto_reactions_threads_view(self.parent)

    @button(label="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å")
    async def open_reaction_set_callback(
        self, btn: Button, interaction: disnake.Interaction
    ):
        do_nothing(btn)
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            return

        if self.option is None:
            await interaction.response.send_message(
                "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∫–∞–Ω–∞–ª", delete_after=1, ephemeral=True
            )
        else:
            await interaction.response.send_modal(
                OptionThreadModal(self.parent, self.option)
            )

    @button(label="–í–∫–ª", style=disnake.ButtonStyle.green)
    async def enable_callback(self, btn: Button, interaction: disnake.Interaction):
        do_nothing(btn)
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            return

        if self.option is None:
            await interaction.response.send_message(
                "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∫–∞–Ω–∞–ª", delete_after=1, ephemeral=True
            )
        else:
            self.w_settings[self.option]["THREAD"] = True
            await update_sets(self, interaction, switch_to=True)

            logger.debug(
                f"Set THREAD for channel {self.option} for guild {interaction.guild.name} was switched to True"
            )

    @button(label="–í—ã–∫–ª", style=disnake.ButtonStyle.danger)
    async def disable_callback(self, btn: Button, interaction: disnake.Interaction):
        do_nothing(btn)
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            return

        if self.option is None:
            await interaction.response.send_message(
                "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∫–∞–Ω–∞–ª", delete_after=1, ephemeral=True
            )
        else:
            self.w_settings[self.option]["THREAD"] = False
            await update_sets(self, interaction, switch_to=False)

            logger.debug(
                f"Set THREAD for channel {self.option} for guild {interaction.guild.name} was switched to False"
            )

    @button(label="–£–¥–∞–ª–∏—Ç—å", style=disnake.ButtonStyle.danger)
    async def open_farewell_set_callback(
        self, btn: Button, interaction: disnake.Interaction
    ):
        do_nothing(btn)
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            return

        if self.option is not None:
            del self.w_settings[self.option]
            await update_sets(self, interaction)
        await GuildSettings.create_auto_reactions_threads_view(self.parent)


class OptionThreadModal(Modal):
    def __init__(self, parent, option):
        self.parent = parent
        self.option = option
        self.settings = parent.settings
        self.w_settings: dict = parent.settings["ADDING_REACTIONS_THREADS_SETTINGS"]
        self.route: str = "ADDING_REACTIONS_THREADS_SETTINGS"
        self.gdb = self.parent.gdb
        components = [
            TextInput(
                label="–ö–æ–¥ —Ä–µ–∞–∫—Ü–∏–∏",
                value=" ".join(self.w_settings[self.option]["REACTIONS"]),
                custom_id="reacts",
            )
        ]
        super().__init__(title="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∞–∫—Ü–∏–π", components=components)

    async def callback(self, interaction: ModalInteraction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            logger.debug(f"User {interaction.author.name} is not an admin")
            return

        reacts = interaction.text_values["reacts"]

        if " " in reacts:
            reacts = reacts.split(" ")
        else:
            reacts = [reacts]

        self.w_settings[self.option]["REACTIONS"] = reacts

        await update_sets(self, interaction)


def create_hello_embed():
    embed = {
        "title": "–ü—Ä–∏–≤–µ—Ç! üìç",
        "description": "–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ "
        "–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å. \n\n–ö–æ–Ω–µ—á–Ω–æ, —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–æ–∑–∂–µ, "
        "–ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞–≤ `/–Ω–∞—Å—Ç—Ä–æ–π–∫–∞_–±–æ—Ç`\n(–Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –±–æ—Ç–∞ –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã "
        "—Å–µ—Ä–≤–µ—Ä–∞)",
        "color": 0x2B2D31,
        "timestamp": datetime.datetime.now().isoformat(),
    }
    return embed


def create_general_embed(data: dict):
    on = "**–í–∫–ª—é—á–µ–Ω–æ**"
    off = "**–í—ã–∫–ª—é—á–µ–Ω–æ**"
    embed = {
        "title": "–°—Ç–∞—Ç—É—Å —Ñ—É–Ω–∫—Ü–∏–π",
        "description": f"**1.** –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ - {on if data['GENERAL_SETTINGS']['WELCOME'] else off}\n\n"
        f"**2.** –ü—Ä–æ—â–∞–Ω–∏–µ - {on if data['GENERAL_SETTINGS']['FAREWELL'] else off}\n\n"
        f"**3.** –ú–æ–¥–µ—Ä–∞—Ü–∏—è: {[f'{k} - {on if v else off}' for k, v in data['GENERAL_SETTINGS']['MODERATION'].items()]}\n\n"
        f"**4.** | **5.** –ê–≤—Ç–æ—Ç–æ–ø—ã: –°–æ–æ–±—â–µ–Ω–∏—è | –û—á–∫–∏ - {on if data['GENERAL_SETTINGS']['AUTOUPDATE_MESSAGES']['MESSAGES'] else off}, "
        f"{on if data['GENERAL_SETTINGS']['AUTOUPDATE_MESSAGES']['SCORES'] else off}\n\n"
        f"**6.** –î–æ—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π - {on if data['GENERAL_SETTINGS']['NEAREST_EVENTS'] else off}\n\n"
        f"**7.** –û–ø—ã—Ç (—É—Ä–æ–≤–Ω–∏) - {on if data['GENERAL_SETTINGS']['EXPERIENCE'] else off}\n\n"
        f"**8.** | **9.** –ò–≥—Ä—ã: –ë–ª–µ–∫–¥–∂–µ–∫ | –†—É–ª–µ—Ç–∫–∞ - {on if data['GENERAL_SETTINGS']['GAMES']['BLACKJACK'] else off}, "
        f"{on if data['GENERAL_SETTINGS']['GAMES']['ROULETTE'] else off}\n\n"
        f"**10.** –ó–∞–∫–∞–∑—ã (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ) - {on if data['GENERAL_SETTINGS']['ORDERS'] else off}\n\n"
        f"**11.** –ó–∞–ø—Ä–æ—Å—ã –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ - {on if data['GENERAL_SETTINGS']['REQUESTS'] else off}\n\n"
        f"**12.** –û—á–∫–∏ - {on if data['GENERAL_SETTINGS']['SCORES'] else off}\n\n"
        f"**13.** –ü–æ–¥—Å—á—ë—Ç –±—É—Å—Ç–µ—Ä–æ–≤ –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞—Ö (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ) - {on if data['GENERAL_SETTINGS']['COUNTING_BOOSTS'] else off}\n\n"
        f"**14.** –ê–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏–∏ –∏ –ê–≤—Ç–æ–≤–µ—Ç–∫–∏ - {on if data['GENERAL_SETTINGS']['ADDING_REACTIONS_THREADS'] else off}\n\n"
        f"**15.** –ê–≤—Ç–æ—Ä–æ–ª–∏ - {on if data['GENERAL_SETTINGS']['AUTO_ADDING_ROLES'] else off}\n\n"
        f"**16.** –ê–≤—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ –∑–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞ —Å–æ–±—ã—Ç–∏–∏ - {on if data['GENERAL_SETTINGS']['AUTO_ADDING_SCORES_FOR_TIME_IN_VOICE_CHANNEL'] else off}\n\n",
        "color": 0x2B2D31,
        "timestamp": datetime.datetime.now().isoformat(),
    }

    return embed


def create_welcome_embed():
    embed = {
        "title": "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ üëã",
        "description": "–ë–æ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –∫–∞–Ω–∞–ª–µ",
        "color": 0x2B2D31,
        "timestamp": datetime.datetime.now().isoformat(),
        "author": None,
        "fields": [
            {
                "name": "–ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üíº",
                "value": "–í –±–æ—Ç–µ –∑–∞–ª–æ–∂–µ–Ω–æ –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ—ç—Ç–æ–º—É –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –≤—ã–±—Ä–∞—Ç—å, –≤ –∫–∞–∫–æ–π –∫–∞–Ω–∞–ª –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è",
            },
            {
                "name": "–ö–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üîñ",
                "value": "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É `–ù–∞—Å—Ç—Ä–æ–∏—Ç—å` –∏ –∏–∑–º–µ–Ω–∏ –ø–æ–ª—è, –∫–∞–∫ —Ç–µ–±–µ –Ω—É–∂–Ω–æ (–∏–ª–∏ –æ—Å—Ç–∞–≤—å –±–∞–∑–æ–≤—ã–µ)! –í—Å–µ –ø–æ–ª—è —Å–¥–µ–ª–∞–Ω—ã –ø–æ–¥ Embed\n\n"
                "–¢—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: `{member.mention}`, `{member.nick}`, `{member.name}`, `{member}` (–≤–≤–æ–¥–∏ —Å —Ñ–∏–≥—É—Ä–Ω—ã–º–∏ —Å–∫–æ–±–∫–∞–º–∏) ‚öôÔ∏è",
            },
        ],
    }
    return embed


def create_farewell_embed():
    embed = {
        "title": "–ü—Ä–æ—â–∞–Ω–∏–µ üíÄ",
        "description": "–ë–æ—Ç —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–± —É—Ö–æ–¥–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –∫–∞–Ω–∞–ª–µ",
        "color": 0x2B2D31,
        "timestamp": datetime.datetime.now().isoformat(),
        "author": None,
        "fields": [
            {
                "name": "–ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üíº",
                "value": "–í –±–æ—Ç–µ –∑–∞–ª–æ–∂–µ–Ω–æ –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ—ç—Ç–æ–º—É –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –≤—ã–±—Ä–∞—Ç—å, –≤ –∫–∞–∫–æ–π –∫–∞–Ω–∞–ª –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è",
            },
            {
                "name": "–ö–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üîñ",
                "value": "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É `–ù–∞—Å—Ç—Ä–æ–∏—Ç—å` –∏ –∏–∑–º–µ–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–∞–∫ —Ç–µ–±–µ –Ω—É–∂–Ω–æ (–∏–ª–∏ –æ—Å—Ç–∞–≤—å –±–∞–∑–æ–≤–æ–µ (—É–¥–æ–±–Ω–æ))!\n\n"
                "–¢—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: `{member.mention}`, `{member.nick}`, `{member.name}`, `{member}` (–≤–≤–æ–¥–∏ —Å —Ñ–∏–≥—É—Ä–Ω—ã–º–∏ —Å–∫–æ–±–∫–∞–º–∏) ‚öôÔ∏è",
            },
        ],
    }
    return embed


def create_feedback_embed():
    embed = {
        "title": "–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ üìü",
        "description": "–ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–ø–æ –ª—é–±–æ–π —Ç–µ–º–µ —Å –µ—ë —É–∫–∞–∑–∞–Ω–∏–µ–º), –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª "
        "—Å –≤—ã–±–æ—Ä–æ–º –∫–Ω–æ–ø–æ–∫: –æ—Ç–≤–µ—Ç–∏—Ç—å (–±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –≤ –ª—Å –∑–∞–ø—Ä–æ—Å–∏–≤—à–µ–º—É) –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å; –≤–∫–ª—é—á–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö",
        "color": 0x2B2D31,
        "timestamp": datetime.datetime.now().isoformat(),
        "author": None,
        "fields": [
            {
                "name": "–ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üíº",
                "value": "–í –±–æ—Ç–µ –∑–∞–ª–æ–∂–µ–Ω—ã –±–∞–∑–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ—ç—Ç–æ–º—É –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –≤—ã–±—Ä–∞—Ç—å, –≤ –∫–∞–∫–æ–º –∫–∞–Ω–∞–ª–µ –±—É–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ "
                "—Å –∫–Ω–æ–ø–∫–æ–π —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤, –∫—É–¥–∞ –æ–Ω–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∏ –≥–¥–µ –±—É–¥—É—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
            },
            {
                "name": "–ö–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üîñ",
                "value": "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É `–ù–∞—Å—Ç—Ä–æ–∏—Ç—å` –∏ –∏–∑–º–µ–Ω–∏ –ø–æ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞, "
                "–∫–∞–∫ —Ç–µ–±–µ –Ω—É–∂–Ω–æ (–∏–ª–∏ –æ—Å—Ç–∞–≤—å –±–∞–∑–æ–≤–æ–µ)! –í—Å–µ –ø–æ–ª—è —Å–¥–µ–ª–∞–Ω—ã –ø–æ–¥ Embed",
            },
        ],
    }
    return embed


def create_scores_exp_embed():
    embed = {
        "title": "–°–∏—Å—Ç–µ–º–∞ –æ—á–∫–æ–≤ –∏ –°–∏—Å—Ç–µ–º–∞ –æ–ø—ã—Ç–∞ (—É—Ä–æ–≤–Ω–∏) üìÄ",
        "description": "–°–∏—Å—Ç–µ–º–∞ –æ—á–∫–æ–≤ - –æ—Ü–µ–Ω–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É—Ç—ë–º –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è –∏–º –æ—á–∫–æ–≤ –∑–∞ –ª—é–±—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—É—á–∞—Å—Ç–∏–µ –≤ –∏–≤–µ–Ω—Ç–∞—Ö, –∏–≥—Ä–∞—Ö –∏ —Ç.–ø.)\n"
        "–°–∏—Å—Ç–µ–º–∞ –æ–ø—ã—Ç–∞ - –ø–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—É—Ç—ë–º –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è –∏–º –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è",
        "color": 0x2B2D31,
        "timestamp": datetime.datetime.now().isoformat(),
        "author": None,
        "fields": [
            {
                "name": "–ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üíº",
                "value": "–ù–∞–∂–º–∏ `–í–∫–ª` / `–í—ã–∫–ª`, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å / –Ω–µ —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –æ—á–∫–æ–≤ –∏ —Å–∏—Å—Ç–µ–º—É –æ–ø—ã—Ç–∞ –Ω–∞ —Å–≤–æ—ë–º —Å–µ—Ä–≤–µ—Ä–µ",
            },
        ],
    }

    return embed


def create_games_embed():
    embed = {
        "title": "–ò–≥—Ä—ã üé∞",
        "description": "–ë–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∞–∑–∞—Ä—Ç–Ω—ã–µ –∏–≥—Ä—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ—á–∫–∏ (—Å–∏—Å—Ç–µ–º–∞ –æ—á–∫–æ–≤)",
        "color": 0x2B2D31,
        "timestamp": datetime.datetime.now().isoformat(),
        "author": None,
        "fields": [
            {
                "name": "–ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üíº",
                "value": "–ù–∞–∂–º–∏ `–í–∫–ª` / `–í—ã–∫–ª`, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ / –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤—Å–µ –∏–≥—Ä—ã",
            },
            {
                "name": "–ö–∞—Å—Ç–æ–º–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ üîñ",
                "value": "–¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –∏–≥—Ä—ã, –ª–∏–±–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–∂–¥—É—é –∏–≥—Ä—É –æ—Ç–¥–µ–ª—å–Ω–æ",
            },
        ],
    }

    return embed


def create_blackjack_embed():
    embed = {
        "title": "BlackJack ‚ô†Ô∏è",
        "description": "BlackJack - –æ–¥–Ω–∞ –∏–∑ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–Ω—ã—Ö –∏–≥—Ä –≤ –∫–∞–∑–∏–Ω–æ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É. "
        "–¶–µ–ª—å - –Ω–∞–±—Ä–∞—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤, –Ω–æ –Ω–µ –±–æ–ª—å—à–µ 21-–≥–æ, –∏ –æ–±—ã–≥—Ä–∞—Ç—å –±–æ—Ç–∞.",
        "color": 0x2B2D31,
        "timestamp": datetime.datetime.now().isoformat(),
        "author": None,
        "fields": [
            {
                "name": "–ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üíº",
                "value": "–ù–∞–∂–º–∏ `–í–∫–ª` / `–í—ã–∫–ª`, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ–π / –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–π –∏–≥—Ä—É",
            },
        ],
    }

    return embed


def create_roulette_embed():
    embed = {
        "title": "Roulette üé≤",
        "description": "–†—É–ª–µ—Ç–∫–∞ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∞–∑–∞—Ä—Ç–Ω–∞—è –∏–≥—Ä–∞ —Å —Å–ª—É—á–∞–π–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –≤—ã–∏–≥—Ä–∞—Ç—å –æ—á–∫–∏",
        "color": 0x2B2D31,
        "timestamp": datetime.datetime.now().isoformat(),
        "author": None,
        "fields": [
            {
                "name": "–ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üíº",
                "value": "–ù–∞–∂–º–∏ `–í–∫–ª` / `–í—ã–∫–ª`, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ–π / –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–π –∏–≥—Ä—É",
            },
        ],
    }

    return embed


def create_nearest_event_embed():
    embed = {
        "title": "–î–æ—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π üì¢",
        "description": "–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∞–≤—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º",
        "color": 0x2B2D31,
        "timestamp": datetime.datetime.now().isoformat(),
        "author": None,
        "fields": [
            {
                "name": "–ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üíº",
                "value": "–í –±–æ—Ç–µ –Ω–µ—Ç –∑–∞–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è `–î—Ä—É–≥–∏–µ`), "
                "–Ω–æ —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –ø–æ–∑–∂–µ –∏ –ø—Ä–æ—Å—Ç–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
            },
            {
                "name": "–ö–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üîñ",
                "value": "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É `–ù–∞—Å—Ç—Ä–æ–∏—Ç—å` –∏ –≤–ø–∏—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–≤–æ–∏—Ö —Å–æ–±—ã—Ç–∏–π "
                "(—á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–≤–µ–Ω—Ç—ã, –Ω—É–∂–Ω–æ –ª–∏–±–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ, –ª–∏–±–æ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)",
            },
        ],
    }

    return embed


def create_moderation_embed():
    embed = {
        "title": "–ú–æ–¥–µ—Ä–∞—Ü–∏—è ‚öîÔ∏è",
        "description": "1. –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ gif",
        "color": 0x2B2D31,
        "timestamp": datetime.datetime.now().isoformat(),
        "author": None,
        "fields": [
            {
                "name": "–ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üíº",
                "value": "–í –±–æ—Ç–µ –∑–∞–ª–æ–∂–µ–Ω—ã –±–∞–∑–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ—ç—Ç–æ–º—É –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞—Ç—å `–í–∫–ª` / `–í—ã–∫–ª`",
            },
            {
                "name": "–ö–∞—Å—Ç–æ–º–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ üîñ",
                "value": "–¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—è",
            },
        ],
    }

    return embed


def create_reactions_threads_embed():
    embed = {
        "title": "–ê–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏–∏ –∏ –ê–≤—Ç–æ–≤–µ—Ç–∫–∏ ‚ôæÔ∏è",
        "description": "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∞–∫—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç –≤–µ—Ç–∫–∏ –∫ –∫–∞–∂–¥–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö",
        "color": 0x2B2D31,
        "timestamp": datetime.datetime.now().isoformat(),
        "author": None,
        "fields": [
            {
                "name": "–ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üíº",
                "value": "–í –±–æ—Ç–µ –Ω–µ—Ç –∑–∞–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ù–∞–∂–º–∏ –Ω–∞ `+`, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª, "
                "–≤ –∫–æ—Ç–æ—Ä–æ–º –∫ –∫–∞–∂–¥–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –±–æ—Ç –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Ä–µ–∞–∫—Ü–∏–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–µ—Ç–∫–∏",
            },
        ],
    }

    return embed


def create_option_embed(option_channel=None):
    embed = {
        "title": "–ê–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏–∏ –∏ –ê–≤—Ç–æ–≤–µ—Ç–∫–∏",
        "description": "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∞–∫—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç –≤–µ—Ç–∫–∏ –∫ –∫–∞–∂–¥–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö",
        "color": 0x2B2D31,
        "timestamp": datetime.datetime.now().isoformat(),
        "author": None,
        "fields": [
            {
                "name": "–ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üíº",
                "value": "–í—ã–±–µ—Ä–∏ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏ –Ω–∞ `–ù–∞—Å—Ç—Ä–æ–∏—Ç—å`, –≥–¥–µ –Ω—É–∂–Ω–æ –≤–ø–∏—Å–∞—Ç—å –∫–æ–¥ —Ä–µ–∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä: `<:B_chad:1172261856895840406> üôÇ`. "
                "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞–ª–∏—Å—å –≤–µ—Ç–∫–∏ –∫ –∫–∞–∂–¥–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é, –Ω–∞–∂–º–∏ `–í–∫–ª`, –ª–∏–±–æ `–í—ã–∫–ª` –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ",
            },
        ],
    }

    if option_channel:
        channel = {"name": "–ö–∞–Ω–∞–ª", "value": option_channel}
        embed["fields"].append(channel)

    return embed


async def create_all_sets_embed(data, interaction):
    embed = {
        "title": "–°—Ç–∞—Ç—É—Å —Ñ—É–Ω–∫—Ü–∏–π",
        "description": "–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å",
        "color": 0x2B2D31,
        "timestamp": datetime.datetime.now().isoformat(),
        "fields": [
            {
                "name": "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
                "value": f"–°—Ç–∞—Ç—É—Å: {'–≤–∫–ª—é—á–µ–Ω–æ' if data['GENERAL_SETTINGS']['WELCOME'] else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}\n"
                f"–ö–∞–Ω–∞–ª: {await get_channel_by_id(interaction, data['WELCOME_SETTINGS']['CHANNEL'])}\n"
                f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {data['WELCOME_SETTINGS']['EMBED']['TITLE']}\n"
                f"–°–æ–æ–±—â–µ–Ω–∏–µ: {data['WELCOME_SETTINGS']['EMBED']['DESCRIPTION']}\n"
                f"–¶–≤–µ—Ç: {hex(data['WELCOME_SETTINGS']['EMBED']['COLOR'])}\n"
                f"–ê–≤—Ç–∞—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –Ω–µ–≥–æ: {data['WELCOME_SETTINGS']['AVATAR_IF_ERROR']}\n"
                f"–ö–∞—Ä—Ç–∏–Ω–∫–∞: {data['WELCOME_SETTINGS']['BACKGROUND_IMAGE']}\n",
            },
            {
                "name": "–ü—Ä–æ—â–∞–Ω–∏–µ",
                "value": f"–°—Ç–∞—Ç—É—Å: {'–≤–∫–ª—é—á–µ–Ω–æ' if data['GENERAL_SETTINGS']['FAREWELL'] else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}\n"
                f"–ö–∞–Ω–∞–ª: {await get_channel_by_id(interaction, data['FAREWELL_SETTINGS']['CHANNEL'])}\n"
                f"–°–æ–æ–±—â–µ–Ω–∏–µ: {data['FAREWELL_SETTINGS']['MESSAGE']}\n",
            },
            {
                "name": "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å",
                "value": f"–°—Ç–∞—Ç—É—Å: {'–≤–∫–ª—é—á–µ–Ω–æ' if data['GENERAL_SETTINGS']['REQUESTS'] else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}\n"
                f"–ö–∞–Ω–∞–ª (–≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–∏–Ω–∏–º–∞–µ–º –æ–±—Ä–∞—â–µ–Ω–∏—è): {await get_channel_by_id(interaction, data['COGS_SETTINGS']['REQUESTS']['BUTTONS_MESSAGE']['CHANNEL'])}\n"
                f"–ö–∞–Ω–∞–ª (–≤ –∫–æ—Ç–æ—Ä–æ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—Ä–∞—â–µ–Ω–∏—è): {await get_channel_by_id(interaction, data['COGS_SETTINGS']['REQUESTS']['ADMIN_CHANNEL'])}\n"
                f"–ö–∞–Ω–∞–ª (–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è): {await get_channel_by_id(interaction, data['COGS_SETTINGS']['REQUESTS']['LOGS_MESSAGE']['CHANNEL'])}\n"
                f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {data['COGS_SETTINGS']['REQUESTS']['BUTTONS_MESSAGE']['EMBED']['TITLE']}\n"
                f"–°–æ–æ–±—â–µ–Ω–∏–µ: {data['COGS_SETTINGS']['REQUESTS']['BUTTONS_MESSAGE']['EMBED']['DESCRIPTION']}\n"
                f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏: {data['COGS_SETTINGS']['REQUESTS']['BUTTONS_MESSAGE']['CALLBACK']}\n"
                f"–¶–≤–µ—Ç: {hex(data['COGS_SETTINGS']['REQUESTS']['BUTTONS_MESSAGE']['EMBED']['COLOR'])}\n",
            },
            {
                "name": "–û—á–∫–∏ –∏ –æ–ø—ã—Ç",
                "value": f"–°—Ç–∞—Ç—É—Å: "
                f"{'–≤–∫–ª—é—á–µ–Ω–æ' if data['GENERAL_SETTINGS']['EXPERIENCE'] or data['GENERAL_SETTINGS']['SCORES'] else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}\n",
            },
            {
                "name": "–ò–≥—Ä—ã",
                "value": f"–í—Å–µ –∏–≥—Ä—ã: {'–≤–∫–ª—é—á–µ–Ω–æ' if data['GENERAL_SETTINGS']['GAMES']['ALL_GAMES'] else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}\n"
                f"–ë–ª—ç–∫–¥–∂–µ–∫: {'–≤–∫–ª—é—á–µ–Ω–æ' if data['GENERAL_SETTINGS']['GAMES']['BLACKJACK'] else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}\n"
                f"–†—É–ª–µ—Ç–∫–∞: {'–≤–∫–ª—é—á–µ–Ω–æ' if data['GENERAL_SETTINGS']['GAMES']['ROULETTE'] else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}\n"
                f"–ö–∞–Ω–∞–ª: {await get_channel_by_id(interaction, data['COGS_SETTINGS']['GAMES']['CHANNEL'])}\n",
            },
            {
                "name": "–ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è",
                "value": f"–°—Ç–∞—Ç—É—Å: {'–≤–∫–ª—é—á–µ–Ω–æ' if data['GENERAL_SETTINGS']['NEAREST_EVENTS'] else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}\n"
                f"–ö–∞–Ω–∞–ª: {await get_channel_by_id(interaction, data['COGS_SETTINGS']['NEAREST_EVENTS']['CHANNEL'])}\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(data['COGS_SETTINGS']['NEAREST_EVENTS']['CATEGORIES'])}",
            },
            {
                "name": "–ú–æ–¥–µ—Ä–∞—Ü–∏—è",
                "value": f"–°—Ç–∞—Ç—É—Å: {'–≤–∫–ª—é—á–µ–Ω–æ' if data['GENERAL_SETTINGS']['MODERATION']['GIF'] else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}\n"
                f"–ö–∞–Ω–∞–ª—ã: {await get_channel_by_id(interaction, data['MODERATION_SETTINGS']['CHANNEL'])}\n"
                f"–°–æ–æ–±—â–µ–Ω–∏–π –¥–æ GIF: {data['MODERATION_SETTINGS']['GIF']['MESSAGES_FOR_GIF']}",
            },
        ],
    }

    if len(data["ADDING_REACTIONS_THREADS_SETTINGS"].keys()) != 0:
        ADDING_REACTIONS_THREADS = {"name": "–ê–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏–∏ –∏ –∞–≤—Ç–æ–≤–µ—Ç–∫–∏"}
        channels_name = await get_channel_by_id(
            interaction, [*data["ADDING_REACTIONS_THREADS_SETTINGS"].keys()]
        )
        channels_name = (
            [channels_name] if isinstance(channels_name, str) else channels_name
        )
        channels_id = [*data["ADDING_REACTIONS_THREADS_SETTINGS"].keys()]

        for i in range(len(channels_id)):
            ADDING_REACTIONS_THREADS["value"] = (
                ADDING_REACTIONS_THREADS.get("value", "")
                + channels_name[i]
                + ": "
                + "–≤–∫–ª—é—á–µ–Ω–æ"
                if data["ADDING_REACTIONS_THREADS_SETTINGS"][channels_id[i]]["THREAD"]
                else "–≤—ã–∫–ª—é—á–µ–Ω–æ"
            )

        embed["fields"].append(ADDING_REACTIONS_THREADS)

    return embed


class GuildsManage(commands.Cog):
    """
    This class will manage bot (client) guilds, configure them
    """

    def __init__(self, bot: commands.Bot) -> None:
        self.bot = bot
        self.gdb = GuildsDBase()
        self.parent = {}
        self.keys = {
            "1": "WELCOME",
            "2": "FAREWELL",
            "3": ["MODERATION", "GIF"],
            "4": ["AUTOUPDATE_MESSAGES", "MESSAGES"],
            "5": ["AUTOUPDATE_MESSAGES", "SCORES"],
            "6": "NEAREST_EVENTS",
            "7": "EXPERIENCE",
            "8": ["GAMES", "BLACKJACK"],
            "9": ["GAMES", "ROULETTE"],
            "10": "ORDERS",
            "11": "REQUESTS",
            "12": "SCORES",
            "13": "COUNTING_BOOSTS",
            "14": "ADDING_REACTIONS_THREADS",
            "15": "AUTO_ADDING_ROLES",
            "16": "AUTO_ADDING_SCORES_FOR_TIME_IN_VOICE_CHANNEL",
        }

    @commands.slash_command(
        name="–Ω–∞—Å—Ç—Ä–æ–π–∫–∞_–±–æ—Ç–∞", description="–ü–æ–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞"
    )
    async def set_guild_settings(
        self, interaction: disnake.ApplicationCommandInteraction
    ):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            return

        db = GuildsDBase()
        enc = JsonEncoder()
        data = {
            "guild_id": interaction.guild.id,
            "guild_name": interaction.guild.name,
            "count_members": interaction.guild.member_count,
        }
        guild = await db.add_guild(data)
        if guild:
            set_view = GuildSettings(interaction, enc.code_from_json(guild.guild_sets))
            self.parent[str(interaction.guild.id)] = set_view
            await interaction.send(".")
            await set_view.create_home_view()

    @commands.slash_command(name="—Ç–µ–∫—É—â–∏–µ_–Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    async def current_settings(self, interaction: disnake.ApplicationCommandInteraction):
        if not await is_admin(interaction.author):
            await interaction.response.send_message(
                "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
            )
            logger.debug(f"User {interaction.author.name} is not an admin")
            return
        gdb: GuildsDBase = GuildsDBase()
        guild: Guilds = await gdb.get_guild({"guild_id": interaction.guild.id})
        enc: JsonEncoder = JsonEncoder()
        if guild:
            await interaction.response.send_message(
                embed=disnake.Embed.from_dict(
                    await create_all_sets_embed(
                        enc.code_from_json(guild.guild_sets), interaction
                    )
                ),
                ephemeral=True,
            )

    @commands.slash_command(name="add_to_db")
    @commands.is_owner()
    async def add_guild_to_db(self, interaction: disnake.ApplicationCommandInteraction):
        gdb = GuildsDBase()
        data = {
            "guild_id": interaction.guild.id,
            "guild_name": interaction.guild.name,
            "count_members": interaction.guild.member_count,
        }

        for _ in range(5):
            res = await gdb.add_guild(data)
            if res:
                await interaction.response.send_message(f"Success {res}")
                break

    @commands.slash_command(name="update_default_sets")
    @commands.is_owner()
    async def update_default_sets(
        self, interaction: disnake.ApplicationCommandInteraction
    ):
        gdb = GuildsDBase()
        enc = JsonEncoder()
        res = await gdb.update_guild(
            {
                "guild_id": interaction.guild.id,
                "guild_sets": enc.code_to_json(GUILD_CONFIG),
            }
        )

        if res:
            await interaction.response.send_message(
                f"Successfully update guild {interaction.guild.name}"
            )

    @commands.Cog.listener()
    async def on_interaction(self, interaction: disnake.MessageInteraction):
        if interaction.type == disnake.InteractionType.component:
            if interaction.component.custom_id == "home_screen":
                if not await is_admin(interaction.author):
                    await interaction.response.send_message(
                        "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
                    )
                    return

                value = interaction.values[0]
                if value == "greetings":
                    await stud_interaction(interaction)
                    await GuildSettings.create_welcome_view(
                        self.parent[str(interaction.guild.id)]
                    )

                elif value == "farewell":
                    await stud_interaction(interaction)
                    await GuildSettings.create_farewell_view(
                        self.parent[str(interaction.guild.id)]
                    )

                elif value == "feedback":
                    await stud_interaction(interaction)
                    await GuildSettings.create_feedback_view(
                        self.parent[str(interaction.guild.id)]
                    )

                elif value == "scores_exp":
                    await stud_interaction(interaction)
                    await GuildSettings.create_scores_exp_view(
                        self.parent[str(interaction.guild.id)]
                    )

                elif value == "games":
                    await stud_interaction(interaction)
                    await GuildSettings.create_games_view(
                        self.parent[str(interaction.guild.id)]
                    )

                elif value == "nearest_events":
                    await stud_interaction(interaction)
                    await GuildSettings.create_nearest_events_view(
                        self.parent[str(interaction.guild.id)]
                    )

                elif value == "moderation":
                    await stud_interaction(interaction)
                    await GuildSettings.create_moderation_view(
                        self.parent[str(interaction.guild.id)]
                    )

                elif value == "adding_reactions_threads":
                    await stud_interaction(interaction)
                    await GuildSettings.create_auto_reactions_threads_view(
                        self.parent[str(interaction.guild.id)]
                    )

            if "fn_" in interaction.component.custom_id:
                if not await is_admin(interaction.author):
                    await interaction.response.send_message(
                        "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤üòõ", ephemeral=True
                    )
                    logger.debug(f"User {interaction.author.name} is not an admin")
                    return

                await toggle_set_easy(self, interaction)

            if "back" in interaction.component.custom_id:
                await GuildSettings.create_home_view(
                    self.parent[str(interaction.guild.id)]
                )


def setup(bot: commands.Bot):
    bot.add_cog(GuildsManage(bot))
