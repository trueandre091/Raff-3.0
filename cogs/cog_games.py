import asyncio
from os import getcwd
import disnake
from disnake.ext import commands
from json import load, dump
from random import randint, shuffle

FOLDER = getcwd()
with (open(f"{FOLDER}/config.json", "r", encoding="utf-8") as file):
    CONFIG = load(file)


async def add_failed_scores_counter(scores: int):
    with (open(f"{FOLDER}/data/counters.json", "r", encoding="utf-8") as f):
        data = load(f)

    data["FAILED_SCORES"] += scores

    with (open(f"{FOLDER}/data/counters.json", "w", encoding="utf-8") as f):
        dump(data, f)


async def bj_designed_embed_start(embed_dict: dict, inter: disnake.ApplicationCommandInteraction, bet: int):
    embed_dict["title"] = "–ü—Ä–∏–≤–µ—Ç, –ø—Ä–∏—è—Ç–µ–ª—å"

    await inter.response.send_message(embed=disnake.Embed.from_dict(embed_dict))
    await asyncio.sleep(1)

    embed_dict["title"] = "–ó–∞—Ö–æ—Ç–µ–ª –ø–æ–∏–≥—Ä–∞—Ç—å –≤ BlackJack?"
    embed_dict["description"] = "–¢—ã —Ö–æ—Ç—è –±—ã –∏–≥—Ä–∞—Ç—å —Ç–æ —É–º–µ–µ—à—å?"

    await inter.edit_original_response(embed=disnake.Embed.from_dict(embed_dict))
    await asyncio.sleep(2)

    embed_dict["title"] = "–í–∏–∂—É, —Ç—ã –ø–æ—Å—Ç–∞–≤–∏–ª —Å–≤–æ–∏ —á–µ—Å—Ç–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—á–∫–∏"
    embed_dict["description"] = f"–ê–∂ {bet} –æ—á... –ø–æ–π–¥—ë—Ç"

    await inter.edit_original_response(embed=disnake.Embed.from_dict(embed_dict))
    await asyncio.sleep(2)

    embed_dict["title"] = "–ù–ê–ß–ò–ù–ê–ï–ú!"
    embed_dict["description"] = ""

    await inter.edit_original_response(embed=disnake.Embed.from_dict(embed_dict))


async def bj_designed_embed(embed_dict: dict, inter: disnake.ApplicationCommandInteraction, current, score):
    embed_dict["title"] = f"–¢–µ–±–µ –¥–æ—Å—Ç–∞–ª–∞—Å—å –∫–∞—Ä—Ç–∞ {current} "
    embed_dict["description"] = f"–£ –≤–∞—Å {score} –æ—á.\n\n**–ë—É–¥–µ—à—å –±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É?**"

    await inter.edit_original_response(
        embed=disnake.Embed.from_dict(embed_dict),
        components=[
            disnake.ui.Button(
                label="–í–∑—è—Ç—å",
                style=disnake.ButtonStyle.blurple,
                custom_id="take"
            ),
            disnake.ui.Button(
                label="–û—Å—Ç–∞–≤–∏—Ç—å",
                style=disnake.ButtonStyle.blurple,
                custom_id="stay"
            )
        ]
    )


def random_card(current, score):
    if type(current) is int:
        score += current
    elif current == 'Ace':
        if score <= 10:
            score += 11
        else:
            score += 1
    else:
        score += 10
    return score


class BlackJack(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.player = ""
        self.deck = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Jack', 'Queen', 'King', 'Ace'] * 4
        self.score = 0
        self.bot_score = 0
        self.turns = 0
        self.bet = 0
        self.embed_dict = {
            "title": "",
            "description": "",
            "color": 0x2b2d31,
            "author": {
                "name": "BlackJack ‚ô†Ô∏è"
            },
            "footer": {
                "text": "",
                "icon_url": ""
            }
        }

    @commands.Cog.listener()
    async def on_interaction(self, interaction: disnake.MessageInteraction):
        if interaction.user != self.player and interaction.type is disnake.MessageInteraction:

            await interaction.response.send_message("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∏–≥—Ä–∞ üíÄ", delete_after=3, ephemeral=True)

        elif "component" in interaction.type:

            if interaction.component.custom_id == "take":
                self.turns += 1
                embed_dict = self.embed_dict
                current = self.deck.pop()
                self.score = random_card(current, self.score)

                await interaction.response.send_message("–¢—ã –≤–∑—è–ª –∫–∞—Ä—Ç—É", delete_after=2.5, ephemeral=True)

                embed_dict["title"] = f"–¢–µ–±–µ –¥–æ—Å—Ç–∞–ª–∞—Å—å –∫–∞—Ä—Ç–∞ {current}"
                embed_dict["description"] = f"–£ —Ç–µ–±—è {self.score} –æ—á."
                await interaction.message.edit(embed=disnake.Embed.from_dict(embed_dict))
                await asyncio.sleep(2)

                if self.score > 21:

                    embed_dict["description"] += "\n–û –Ω–µ—Ç."

                    await interaction.message.edit(embed=disnake.Embed.from_dict(embed_dict), components=[])
                    await asyncio.sleep(2)

                    embed_dict["description"] += f"\n\n**–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª** –∏ –ø–æ—Ç–µ—Ä—è–ª {self.bet} –æ—á."

                    await interaction.message.edit(embed=disnake.Embed.from_dict(embed_dict))

                elif self.score == 21:

                    embed_dict["description"] += "\n–í–û–û–û–£"

                    await interaction.message.edit(embed=disnake.Embed.from_dict(embed_dict), components=[])
                    await asyncio.sleep(2)

                    embed_dict["description"] += "\n\n**21-–æ! –¢—ã –≤—ã–∏–≥—Ä–∞–ª!**"

                    await interaction.message.edit(embed=disnake.Embed.from_dict(embed_dict))
                    await asyncio.sleep(2)

                    embed_dict["image"] = {"url": "https://media.tenor.com/olRQ2QnTqxQAAAAi/kirby-dance.gif"}

                    await interaction.message.edit(embed=disnake.Embed.from_dict(embed_dict))

                else:

                    embed_dict["description"] += f"\n\n**–ë—É–¥–µ—à—å –±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É?**"

                    await interaction.message.edit(embed=disnake.Embed.from_dict(embed_dict))

            elif interaction.component.custom_id == "stay":
                embed_dict = self.embed_dict

                embed_dict["description"] = f"–£ —Ç–µ–±—è {self.score} –æ—á.\n\n**–ê —Ç–µ–ø–µ—Ä—å –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –≤—ã–ø–∞–ª–æ –±–æ—Ç—É...**"

                await interaction.message.edit(embed=disnake.Embed.from_dict(embed_dict), components=[])
                await asyncio.sleep(2)

                while self.bot_score <= 15:
                    current = self.deck.pop()
                    self.bot_score = random_card(current, self.bot_score)

                    embed_dict["description"] += f"\n–ë–æ—Ç—É –≤—ã–ø–∞–ª–∞ –∫–∞—Ä—Ç–∞ {current}, —É –Ω–µ–≥–æ {self.bot_score} –æ—á."
                    await interaction.message.edit(embed=disnake.Embed.from_dict(embed_dict))
                    if self.bot_score > 21:
                        self.bot_score = 0
                        break
                    await asyncio.sleep(1)

                await asyncio.sleep(2)

                if self.bot_score > self.score:

                    embed_dict["description"] += f"\n\n**–ë–æ—Ç —Ç–µ–±—è –æ–±—ã–≥—Ä–∞–ª. –¢—ã –ø–æ—Ç–µ—Ä—è–ª {self.bet} –æ—á.**"

                    await interaction.message.edit(embed=disnake.Embed.from_dict(embed_dict))

                elif self.bot_score < self.score:

                    embed_dict["description"] += f"\n\n**–¢—ã –≤—ã–∏–≥—Ä–∞–ª! –ò –ø–æ–ª—É—á–∏–ª {self.bet} –æ—á.**"

                    await interaction.message.edit(embed=disnake.Embed.from_dict(embed_dict))

                else:

                    embed_dict["description"] += f"\n\n**–ù–∏—á—å—è. –¢—ã –≤—ã–∏–≥—Ä–∞–ª {self.bet // 2} –æ—á.**"

                    await interaction.message.edit(embed=disnake.Embed.from_dict(embed_dict))

    @commands.cooldown(1, 10)
    @commands.slash_command(description="–°—ã–≥—Ä–∞—Ç—å –≤ BlackJack –Ω–∞ —Å–≤–æ–∏ –æ—á–∫–∏ (/rep)")
    async def –±–ª–µ–∫–¥–∂–µ–∫(self, inter: disnake.ApplicationCommandInteraction, —Å—Ç–∞–≤–∫–∞: int):

        member_id = inter.author.id

        with (open(f"{FOLDER}/data/users_data.json", "r", encoding="utf-8") as f):
            data = load(f)

        if str(member_id) not in data:

            await inter.response.send_message("–£ –≤–∞—Å 0 –æ—á–∫–æ–≤ üíÄ", delete_after=5, ephemeral=True)

        else:

            if —Å—Ç–∞–≤–∫–∞ > data[str(member_id)] or —Å—Ç–∞–≤–∫–∞ < 1:

                await inter.response.send_message("–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –±–æ–ª—å—à–µ —á–µ–º —É –≤–∞—Å –µ—Å—Ç—å, –ª–∏–±–æ –º–µ–Ω—å—à–µ 1 üíÄ", delete_after=5,
                                                  ephemeral=True)

            else:
                self.player = inter.author
                self.score = 0
                self.bot_score = 0
                self.turns = 0
                self.bet = —Å—Ç–∞–≤–∫–∞
                self.deck = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Jack', 'Queen', 'King', 'Ace'] * 4
                self.embed_dict = {
                    "title": "",
                    "description": "",
                    "color": 0x2b2d31,
                    "author": {
                        "name": "BlackJack ‚ô†Ô∏è"
                    },
                    "footer": {
                        "text": f"{inter.guild.name}",
                        "icon_url": f"{inter.guild.icon.url}"
                    }
                }
                embed_dict = self.embed_dict

                data[str(member_id)] -= self.bet

                shuffle(self.deck)

                await bj_designed_embed_start(embed_dict, inter, self.bet)

                current = self.deck.pop()
                self.score = random_card(current, self.score)

                await bj_designed_embed(embed_dict, inter, current, self.score)

                await inter.edit_original_response(embed=disnake.Embed.from_dict(embed_dict))

    @–±–ª–µ–∫–¥–∂–µ–∫.error  # Tell the user when they've got a cooldown
    async def on_test_error(self, interaction: disnake.Interaction, error: commands.CommandError):
        if isinstance(error, commands.CommandOnCooldown):
            await interaction.response.send_message("–ü–æ—Ç–µ—Ä–ø–∏ üíÄ", delete_after=5, ephemeral=True)


class Roulette(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @commands.cooldown(1, 5)
    @commands.slash_command(description="–ö—Ä—É—Ç–∞–Ω—É—Ç—å —Ä—É–ª–µ—Ç–æ—á–∫—É –Ω–∞ —Å–≤–æ–∏ –†–ï–ê–õ–¨–ù–´–ï –æ—á–∫–∏ (/rep)")
    async def —Ä—É–ª–µ—Ç–∫–∞(self, inter: disnake.ApplicationCommandInteraction, —Å—Ç–∞–≤–∫–∞: int):

        with (open(f"{FOLDER}/data/users_data.json", "r", encoding="utf-8") as f):
            data = load(f)

        if str(inter.author.id) in data:
            member_id = inter.author.id

            if —Å—Ç–∞–≤–∫–∞ > data[str(member_id)] or —Å—Ç–∞–≤–∫–∞ < 1:

                await inter.response.send_message("–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –±–æ–ª—å—à–µ —á–µ–º —É –≤–∞—Å –µ—Å—Ç—å, –ª–∏–±–æ –º–µ–Ω—å—à–µ 1 üíÄ", delete_after=5,
                                                  ephemeral=True)

            else:
                lucky = randint(0, 100)

                data[str(member_id)] -= —Å—Ç–∞–≤–∫–∞

                flag = 1
                if lucky == 100:
                    flag = 3
                    data[str(member_id)] += —Å—Ç–∞–≤–∫–∞ * 4
                elif lucky >= CONFIG["SETTINGS"]["CHANCE"]:
                    flag = 2
                    data[str(member_id)] += —Å—Ç–∞–≤–∫–∞ * 2
                elif lucky == 0:
                    flag = 0
                    data[str(member_id)] -= —Å—Ç–∞–≤–∫–∞ // 2
                member_scores = data[str(member_id)]

                with (open(f"{FOLDER}/data/users_data.json", "w", encoding="utf-8") as f):
                    dump(data, f)

                embed_dict = {
                    "title": "",
                    "description": f"{inter.author.mention} - `{member_scores}`\n–°—Ç–∞–≤–∫–∞ - `{—Å—Ç–∞–≤–∫–∞}`",
                    "color": 0x2b2d31,
                    "author": {
                        "name": "–†—É–ª–µ—Ç–∫–∞ –Ω–∞ –æ—á–∫–∏ 50/50",
                        "icon_url": "https://i.postimg.cc/3JrRXKCz/the-roulette-wheel.jpg"
                    },
                    "footer": {
                        "text": f"{inter.guild.name}",
                        "icon_url": f"{inter.guild.icon.url}"
                    }
                }

                if flag == 1:
                    await add_failed_scores_counter(—Å—Ç–∞–≤–∫–∞)

                    embed_dict["title"] += "–í–∞–º –Ω–µ –ø–æ–≤–µ–∑–ª–æ ü§ï"
                elif flag == 0:
                    await add_failed_scores_counter(—Å—Ç–∞–≤–∫–∞ + —Å—Ç–∞–≤–∫–∞ // 2)

                    embed_dict["title"] += "–í–∞–º –ö–ê–¢–ï–ì–û–†–ò–ß–ï–°–ö–ò –ù–ï –ø–æ–≤–µ–∑–ª–æ üíî"
                elif flag == 2:
                    embed_dict["title"] += "–í–∞–º –ø–æ–≤–µ–∑–ª–æ, c—Ç–∞–≤–∫–∞ —É–¥–≤–æ–µ–Ω–∞ ü§ë"
                elif flag == 3:
                    embed_dict["title"] += "–°–£–ü–ï–†–£–î–ê–ß–ê ‚ù§Ô∏è‚Äçüî•‚ù§Ô∏è‚Äçüî•‚ù§Ô∏è‚Äçüî•"

                await inter.response.send_message(embed=disnake.Embed.from_dict(embed_dict))
        else:

            await inter.response.send_message("–£ –≤–∞—Å 0 –æ—á–∫–æ–≤ üíÄ", delete_after=5, ephemeral=True)

    @—Ä—É–ª–µ—Ç–∫–∞.error  # Tell the user when they've got a cooldown
    async def on_test_error(self, interaction: disnake.Interaction, error: commands.CommandError):
        if isinstance(error, commands.CommandOnCooldown):
            await interaction.response.send_message("–ü–æ—Ç–µ—Ä–ø–∏ üíÄ", delete_after=5, ephemeral=True)


def setup(bot: commands.Bot):
    bot.add_cog(Roulette(bot))
    bot.add_cog(BlackJack(bot))
